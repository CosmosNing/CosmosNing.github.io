<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CosmosNing的个人博客</title>
  <link rel="alternate" type="text/html" href="https://cosmosning.github.io"/>
  <link rel="self" type="application/atom+xml" href="/atom.xml"/>
  
  <updated>2020-06-30T14:56:45.068Z</updated>
  <id>https://cosmosning.github.io/</id>
  <icon>https://gitee.com/CosmosNing/MyPicGo/raw/master/images/avatar-32.ico</icon>
  <subtitle>探索·好奇</subtitle>
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用数据复盘我的考研初试</title>
    <link href="https://cosmosning.github.io/2020/06/30/yong-shu-ju-fu-pan-wo-de-kao-yan-chu-shi/"/>
    <id>https://cosmosning.github.io/2020/06/30/yong-shu-ju-fu-pan-wo-de-kao-yan-chu-shi/</id>
    
    
    <author>
    <name>CosmosNing</name>
    <uri>https://cosmosning.github.io/about</uri>
    </author>
    
    
    <published>2020-06-30T12:51:25.000Z</published>
    <updated>2020-06-30T14:56:45.068Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>受今年疫情的影响，2020 届研究生录取阶段到近几周才画上圆满的句号。距离开学还有些空闲时间，这段时间作为终点和起点的交会，是绝好的复盘机会。本文尝试以图表、关键的统计量简单地分析本年度南航官方公布的初试成绩情况，量化我的初试水平，并从这些客观的数据中分析原因，找到自身的不足，做好未来的打算。</p><p>此外，本文亦希望读者可从数据分析中窥探出考研趋势，规划好自己的准备工作。</p></blockquote><h1 id="2020-南航计算机考研初试情况概述"><a href="#2020-南航计算机考研初试情况概述" class="headerlink" title="2020 南航计算机考研初试情况概述"></a>2020 南航计算机考研初试情况概述</h1><p>（数据来源：<a href="http://cs.nuaa.edu.cn/2020/0520/c10851a200876/page.htm" target="_blank" rel="noopener">官方公布的初试成绩（仅包括进入复试的部分）</a>）</p><p>我对上述数据，分专业、分科目分别统计了分数情况。</p><h2 id="电子信息（专硕）"><a href="#电子信息（专硕）" class="headerlink" title="电子信息（专硕）"></a>电子信息（专硕）</h2><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/%E7%94%B5%E5%AD%90%E4%BF%A1%E6%81%AF-%E6%94%BF%E6%B2%BB%E5%88%86%E6%95%B0%E5%88%86%E5%B8%83%E6%83%85%E5%86%B5.png" alt="电子信息-zhengzhi"></p><table><thead><tr><th align="center">学科</th><th align="center">最高</th><th align="center">最低</th><th align="center">均分</th><th align="center">中位数</th></tr></thead><tbody><tr><td align="center">政治</td><td align="center">78</td><td align="center">56</td><td align="center">66.41</td><td align="center">66</td></tr></tbody></table><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/%E7%94%B5%E5%AD%90%E4%BF%A1%E6%81%AF-%E8%8B%B1%E4%B8%80%E5%88%86%E6%95%B0%E5%88%86%E5%B8%83%E6%83%85%E5%86%B5.png" alt="电子信息-英一"></p><table><thead><tr><th align="center">学科</th><th align="center">最高</th><th align="center">最低</th><th align="center">均分</th><th align="center">中位数</th></tr></thead><tbody><tr><td align="center">英一</td><td align="center">85</td><td align="center">39</td><td align="center">65.70</td><td align="center">67</td></tr></tbody></table><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/%E7%94%B5%E5%AD%90%E4%BF%A1%E6%81%AF-%E6%95%B0%E4%BA%8C%E5%88%86%E6%95%B0%E5%88%86%E5%B8%83%E6%83%85%E5%86%B5.png" alt="电子信息-数二"></p><table><thead><tr><th align="center">学科</th><th align="center">最高</th><th align="center">最低</th><th align="center">均分</th><th align="center">中位数</th></tr></thead><tbody><tr><td align="center">数二</td><td align="center">134</td><td align="center">65</td><td align="center">95.34</td><td align="center">94.5</td></tr></tbody></table><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/%E7%94%B5%E5%AD%90%E4%BF%A1%E6%81%AF-829%E5%88%86%E6%95%B0%E5%88%86%E5%B8%83%E6%83%85%E5%86%B5.png" alt="电子信息-829"></p><table><thead><tr><th align="center">学科</th><th align="center">最高</th><th align="center">最低</th><th align="center">均分</th><th align="center">中位数</th></tr></thead><tbody><tr><td align="center">829</td><td align="center">134</td><td align="center">64</td><td align="center">100.69</td><td align="center">101</td></tr></tbody></table><h2 id="计算机科学与技术（学硕）"><a href="#计算机科学与技术（学硕）" class="headerlink" title="计算机科学与技术（学硕）"></a>计算机科学与技术（学硕）</h2><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8E%E6%8A%80%E6%9C%AF-%E6%94%BF%E6%B2%BB%E5%88%86%E6%95%B0%E5%88%86%E5%B8%83%E6%83%85%E5%86%B5.png" alt="计算机科学与技术-zhengzhi"></p><table><thead><tr><th align="center">学科</th><th align="center">最高</th><th align="center">最低</th><th align="center">均分</th><th align="center">中位数</th></tr></thead><tbody><tr><td align="center">政治</td><td align="center">76</td><td align="center">59</td><td align="center">68</td><td align="center">68.5</td></tr></tbody></table><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8E%E6%8A%80%E6%9C%AF-%E8%8B%B1%E4%B8%80%E5%88%86%E6%95%B0%E5%88%86%E5%B8%83%E6%83%85%E5%86%B5.png" alt="计算机科学与技术-英一"></p><table><thead><tr><th align="center">学科</th><th align="center">最高</th><th align="center">最低</th><th align="center">均分</th><th align="center">中位数</th></tr></thead><tbody><tr><td align="center">英一</td><td align="center">85</td><td align="center">43</td><td align="center">67.90</td><td align="center">70</td></tr></tbody></table><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8E%E6%8A%80%E6%9C%AF-%E6%95%B0%E4%B8%80%E5%88%86%E6%95%B0%E5%88%86%E5%B8%83%E6%83%85%E5%86%B5.png" alt="计算机科学与技术-数一"></p><table><thead><tr><th align="center">学科</th><th align="center">最高</th><th align="center">最低</th><th align="center">均分</th><th align="center">中位数</th></tr></thead><tbody><tr><td align="center">数一</td><td align="center">126</td><td align="center">73</td><td align="center">95.88</td><td align="center">97</td></tr></tbody></table><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8E%E6%8A%80%E6%9C%AF-829%E5%88%86%E6%95%B0%E5%88%86%E5%B8%83%E6%83%85%E5%86%B5.png" alt="计算机科学与技术-829"></p><table><thead><tr><th align="center">学科</th><th align="center">最高</th><th align="center">最低</th><th align="center">均分</th><th align="center">中位数</th></tr></thead><tbody><tr><td align="center">829</td><td align="center">130</td><td align="center">87</td><td align="center">110.63</td><td align="center">110.5</td></tr></tbody></table><h2 id="软件工程（学硕）"><a href="#软件工程（学硕）" class="headerlink" title="软件工程（学硕）"></a>软件工程（学硕）</h2><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E6%94%BF%E6%B2%BB%E5%88%86%E6%95%B0%E5%88%86%E5%B8%83%E6%83%85%E5%86%B5.png" alt="软件工程-zhengzhi"></p><table><thead><tr><th align="center">学科</th><th align="center">最高</th><th align="center">最低</th><th align="center">均分</th><th align="center">中位数</th></tr></thead><tbody><tr><td align="center">政治</td><td align="center">76</td><td align="center">60</td><td align="center">67.93</td><td align="center">68</td></tr></tbody></table><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E8%8B%B1%E4%B8%80%E5%88%86%E6%95%B0%E5%88%86%E5%B8%83%E6%83%85%E5%86%B5.png" alt="软件工程-英一"></p><table><thead><tr><th align="center">学科</th><th align="center">最高</th><th align="center">最低</th><th align="center">均分</th><th align="center">中位数</th></tr></thead><tbody><tr><td align="center">英一</td><td align="center">81</td><td align="center">47</td><td align="center">65.93</td><td align="center">69</td></tr></tbody></table><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E6%95%B0%E4%B8%80%E5%88%86%E6%95%B0%E5%88%86%E5%B8%83%E6%83%85%E5%86%B5.png" alt="软件工程-数一"></p><table><thead><tr><th align="center">学科</th><th align="center">最高</th><th align="center">最低</th><th align="center">均分</th><th align="center">中位数</th></tr></thead><tbody><tr><td align="center">数一</td><td align="center">115</td><td align="center">69</td><td align="center">89.34</td><td align="center">86</td></tr></tbody></table><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-829%E5%88%86%E6%95%B0%E5%88%86%E5%B8%83%E6%83%85%E5%86%B5.png" alt="软件工程-829"></p><table><thead><tr><th align="center">学科</th><th align="center">最高</th><th align="center">最低</th><th align="center">均分</th><th align="center">中位数</th></tr></thead><tbody><tr><td align="center">829</td><td align="center">143</td><td align="center">66</td><td align="center">102.41</td><td align="center">104</td></tr></tbody></table><h2 id="网络空间安全（学硕）"><a href="#网络空间安全（学硕）" class="headerlink" title="网络空间安全（学硕）"></a>网络空间安全（学硕）</h2><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E5%AE%89%E5%85%A8-%E6%94%BF%E6%B2%BB%E5%88%86%E6%95%B0%E5%88%86%E5%B8%83%E6%83%85%E5%86%B5.png" alt="网络空间安全-zhengzhi"></p><table><thead><tr><th align="center">学科</th><th align="center">最高</th><th align="center">最低</th><th align="center">均分</th><th align="center">中位数</th></tr></thead><tbody><tr><td align="center">政治</td><td align="center">76</td><td align="center">56</td><td align="center">66.94</td><td align="center">66.5</td></tr></tbody></table><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E5%AE%89%E5%85%A8-%E8%8B%B1%E4%B8%80%E5%88%86%E6%95%B0%E5%88%86%E5%B8%83%E6%83%85%E5%86%B5.png" alt="网络空间安全-英一"></p><table><thead><tr><th align="center">学科</th><th align="center">最高</th><th align="center">最低</th><th align="center">均分</th><th align="center">中位数</th></tr></thead><tbody><tr><td align="center">英一</td><td align="center">81</td><td align="center">49</td><td align="center">65.5</td><td align="center">65.5</td></tr></tbody></table><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E5%AE%89%E5%85%A8-%E6%95%B0%E4%B8%80%E5%88%86%E6%95%B0%E5%88%86%E5%B8%83%E6%83%85%E5%86%B5.png" alt="网络空间安全-数一"></p><table><thead><tr><th align="center">学科</th><th align="center">最高</th><th align="center">最低</th><th align="center">均分</th><th align="center">中位数</th></tr></thead><tbody><tr><td align="center">数一</td><td align="center">119</td><td align="center">57</td><td align="center">82.66</td><td align="center">80.5</td></tr></tbody></table><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E5%AE%89%E5%85%A8-829%E5%88%86%E6%95%B0%E5%88%86%E5%B8%83%E6%83%85%E5%86%B5.png" alt="网络空间安全-829"></p><table><thead><tr><th align="center">学科</th><th align="center">最高</th><th align="center">最低</th><th align="center">均分</th><th align="center">中位数</th></tr></thead><tbody><tr><td align="center">829</td><td align="center">118</td><td align="center">82</td><td align="center">99.88</td><td align="center">100.5</td></tr></tbody></table><h1 id="量化我的水平"><a href="#量化我的水平" class="headerlink" title="量化我的水平"></a>量化我的水平</h1><p>如何量化我的水平呢？这里我使用了如下方法。</p><p>首先，拿到本专业分科目的成绩数据。具体的对于我来说，我抽取了软件工程专业的各科分数。然后将单科成绩分别降序排名。从中找到我的分数的位次，并除以总进复试人数，获得一个百分比。针对不同百分比，每一科按照如下要求打分：</p><p>当百分比落在</p><ul><li>0 % ~ 20 %：打 5 分</li><li>21% ~ 40%： 打 4 分</li><li>41% ~ 60%： 打 3 分</li><li>61% ~ 80%： 打 2 分</li><li>81% ~ 100%： 打 1 分</li></ul><p>我以上述方式量化的我的水平，具体如下：</p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/%E8%83%BD%E5%8A%9B%E9%9B%B7%E8%BE%BE%E5%9B%BE.png" alt="能力雷达图"></p><p>初步分析可以发现，我的技能树有些歪，存在较为严重的偏科现象。英语有非常好的优势，数学处于中等水平，而政治和专业课则严重脱了我的后腿。</p><h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><ol><li>英语一直是我的强势科目，这要感谢初、高中英语的高强度的训练和全面的知识框架，让我不用太多时间，便能适应考研英语的套路。</li><li>在准备研究生入学考试时，数学是我重点关注的工作，花了很多时间和精力做题训练。但没料到今年数一难度加大（数一今年全国均分 65 左右，类似 2018 年，具体数据可以参考各个考研老师的分析。我记得宇哥在今年 0 基础 30 讲视频里讲过），让我原形毕露，考的分数十分难看。不过，能够在同专业内排到中等水平，这是出乎我意料的，也是令我比较惊喜的。难的数学也会有好处，会把哪些比你强一点的半吊子也拉下来，和你“平起平坐”。</li><li>专业课是我比较后悔的。这种情况完全是我过度轻视，缺少必要的时间投入导致的。</li><li>政治不做评价。</li></ol><h1 id="今后打算"><a href="#今后打算" class="headerlink" title="今后打算"></a>今后打算</h1><p>最近选定了导师，今后会做知识图谱和深度学习的相关工作。希望自己在新的阶段，除了做项目、看文献，也需抽出时间提升自己的专业水平。为此，我制定了如下关键任务：</p><ul><li><input disabled="" type="checkbox"> 每天至少 1 小时左右的专业知识学习</li><li><input disabled="" type="checkbox"> 每周 1 篇博文，总结关键重要的知识点</li><li><input disabled="" type="checkbox"> …（待补充）</li></ul><p>谨以此篇，作为近阶段学习工作的复盘。</p>]]></content>
    
    <summary type="html">
    
      扒了下今年南航计算机学院的初试成绩，试图用数据分析的方式复盘我的考研初试成绩
    
    </summary>
    
    
      <category term="复盘" scheme="https://cosmosning.github.io/categories/%E5%A4%8D%E7%9B%98/"/>
    
    
      <category term="数据分析" scheme="https://cosmosning.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="研究生" scheme="https://cosmosning.github.io/tags/%E7%A0%94%E7%A9%B6%E7%94%9F/"/>
    
      <category term="初试" scheme="https://cosmosning.github.io/tags/%E5%88%9D%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>如何写一封研究生自荐信</title>
    <link href="https://cosmosning.github.io/2020/06/27/ru-he-xie-yi-feng-yan-jiu-sheng-zi-jian-xin/"/>
    <id>https://cosmosning.github.io/2020/06/27/ru-he-xie-yi-feng-yan-jiu-sheng-zi-jian-xin/</id>
    
    
    <author>
    <name>CosmosNing</name>
    <uri>https://cosmosning.github.io/about</uri>
    </author>
    
    
    <published>2020-06-27T07:44:47.000Z</published>
    <updated>2020-06-30T14:56:45.068Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>投自荐信和简历投了一个多月，经过许多心酸和痛苦，今天终于成功选定中意的导师。谨以此文纪念这段经历。本文希望通过自身复盘，总结一些研究生自荐信的注意点，供读者参考。主要内容包括：</p><ol><li>如何确定发信对象</li><li>如何构思自荐信的内容</li><li>如何设置发信邮箱</li><li>如何选定自荐信发送的时机</li><li>如何回复导师的回信</li></ol><p>最后，本文也留了一个彩蛋，简单地回顾了期间发生的一些事情。想看故事的，可以直接跳到最后一部分。</p></blockquote><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/markus-winkler-Lp4jsVg8gpY-unsplash.jpg" alt="题图"></p><p>Photo by <a href="https://unsplash.com/@markuswinkler?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText" target="_blank" rel="noopener">Markus Winkler</a> on <a href="https://unsplash.com/s/photos/email?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p><h1 id="如何确定发信对象"><a href="#如何确定发信对象" class="headerlink" title="如何确定发信对象"></a>如何确定发信对象</h1><p>确定发信对象，也就是要确定自己未来三年的导师。推荐到学院官网上查询相关导师的介绍。一来可以了解导师的研究方向，二来可以查到导师的电子邮件地址。这些都会为后续的工作做好准备。</p><p>针对导师的选择，建议结合自己的专业基础和兴趣所在。专业基础相近的（跨考的别打我），导师培养起来也方便；兴趣更是三年研究生生涯的精神支柱之一。建议同方向的导师多关注几位，防止最后在一个树上吊死。</p><p>不要害怕给老师发自荐信。学术大牛、副教授、青年优秀学者，都试试。万一哪个大牛看上你的经历，那不是赚发了？当然，也不必盯着几个大咖不放，这些热门的教授也许早就被推免生报满了，留给统考的机会并不多。</p><p>也许，你并不想在学术上有多高的造诣。直想 3 年，做做项目，拿到毕业证就行了。这种情况下，你可以选一些偏工程方向的导师，尤其对于专硕而言。</p><h1 id="如何构思自荐信的内容"><a href="#如何构思自荐信的内容" class="headerlink" title="如何构思自荐信的内容"></a>如何构思自荐信的内容</h1><p>自荐信内容的构思可以分两步走：</p><ol><li>构思简历</li><li>构思自荐信</li></ol><p>简历相当于是自荐信的提纲，而自荐信则是简历的扩充与细节描述。接下来，我结合自己的简历和自荐信聊聊这两部分内容。</p><h2 id="如何构思简历（附-Markdown-模板）"><a href="#如何构思简历（附-Markdown-模板）" class="headerlink" title="如何构思简历（附 Markdown 模板）"></a>如何构思简历（附 Markdown 模板）</h2><p>简历可以从以下几个方面构思：</p><ul><li>基本信息：介绍自己的姓名、政治面貌、联系方式等等（可加上自己的证件照）</li><li>教育背景：介绍自己的毕业院校，所学专业，成绩、绩点、专业排名等等</li><li>科研或项目经历：介绍自己的科研经历或者是项目经历。如果获奖，也可在此列出。未获奖的话，就简单概括一下使用什么技术，解决了什么问题，有什么创新等等。</li><li>社会实践：专业相关的实习或者社会实践</li><li>获奖情况：按国家级、省级、校级分类，按专业重要性排序</li><li>基本技能：英语能力（四六级、托福雅思等）、专业基础能力（软件、编程语言、实验仪器等）</li></ul><p>Markdown 模板如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## 基本信息</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:flex;"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"flex:1;max-width:fit-content;margin:5px;"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span>姓名&amp;emsp;&amp;emsp;XXX&amp;emsp;&amp;emsp;&amp;emsp;政治面貌&amp;emsp;&amp;emsp;XXX（非(预备)党员删除）<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span>手机&amp;emsp;&amp;emsp;XXX&amp;emsp;&amp;emsp;&amp;emsp;电子邮箱&amp;emsp;&amp;emsp;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:XXX@example.com"</span>&gt;</span></span>XXX@example.com<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">"flex:1;max-width: 100px;height: 100px;margin-left: 50px;"</span> <span class="attr">src</span>=<span class="string">"XXX.jpg"</span> <span class="attr">alt</span>=<span class="string">"证件照"</span>/&gt;</span></span>证件照部分，使用时请删掉<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">## 教育背景</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>20XX.09 ~ 20XX.06&amp;emsp;XXX大学&amp;emsp;本科&amp;emsp;XXX专业&amp;emsp;平均绩点：<span class="strong">**XXX / 满绩点（排名情况）**</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 科研经历（或项目经历）</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>20XX.XX ~ 20XX.XX&amp;emsp;XX研究或者XX项目（获了什么奖、使用那些技术、有什么创新等等，不展开，简略概括即可）</span><br><span class="line"></span><br><span class="line"><span class="section">## 实践活动（社会实践）</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>20XX.XX ~ 20XX.XX.XX&amp;emsp;参加了什么活动，拿过什么奖，锻炼了什么能力（最好和专业相关，志愿者活动对于一般理工科来说，就不用写了）</span><br><span class="line"></span><br><span class="line"><span class="section">## 获奖情况</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span><span class="strong">**国家级（X 项）**</span></span><br><span class="line"><span class="bullet">  - </span>XXX（如果能查到，建议写上该奖项获奖比例或者奖项排名，下同）</span><br><span class="line"><span class="bullet">  - </span>（专业相关学科竞赛等，下同）</span><br><span class="line"><span class="bullet">- </span><span class="strong">**省级（X 项）**</span></span><br><span class="line"><span class="bullet">  - </span>XXX</span><br><span class="line"><span class="bullet">- </span><span class="strong">**校级（X 项）**</span></span><br><span class="line"><span class="bullet">  - </span>XXX</span><br><span class="line"><span class="bullet">  - </span>（例如奖学金等）</span><br><span class="line"></span><br><span class="line"><span class="section">## 基本技能</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span><span class="strong">**英语**</span>：&amp;emsp;&amp;emsp;&amp;emsp;CET-4：XXX 分&amp;emsp;CET-6：XXX 分（托福、雅思也可列入其中）</span><br><span class="line"><span class="bullet">* </span><span class="strong">**专业技能**</span>：&amp;emsp;（简单列举一些专业相关的技术，不一定要面面俱到，选自己熟悉的即可）</span><br></pre></td></tr></table></figure><div class="note info">            <p>将上述 Markdown 模板拷入 <a href="https://typora.io/" target="_blank" rel="noopener">Typora</a> ，即可编辑。编辑完成后，导出成 PDF 文件即可。此外，建议将内容浓缩到一页以内，方便导师查阅。</p>          </div><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/resume_result.PNG" alt="简历效果图"></p><p>写完简历后，也可以在简历文件中附上自己的获奖证书、四六级证书、本科成绩单等等。这些可以作为自荐信的附件内容，供导师查看。</p><h2 id="如何构思自荐信（附自荐信模板）"><a href="#如何构思自荐信（附自荐信模板）" class="headerlink" title="如何构思自荐信（附自荐信模板）"></a>如何构思自荐信（附自荐信模板）</h2><p>有了简历的提纲挈领，再构思自荐信就会容易一些。推荐从以下几个方面构思</p><ul><li>自己的基本情况：自己是谁？毕业于哪里？学的什么专业？本科成绩怎么样？初复试成绩怎么样？（如果知道排名，也可以加上）</li><li>自己的科研（项目）经历：承担什么责任？使用什么技术？解决了什么问题？效果（最好将此项量化而非模糊地解释）怎么样？（如果觉得技术方面没什么好讲的，可以聊聊项目锻炼了哪些能力或者培养了哪些品质）</li><li>简述自己的获奖情况、英语能力、专业能力。</li><li>针对老师的方向做简单的夸赞，并表示愿意深入研究。</li><li>写明自己期待老师回复的内容（如还有没有名额等等）</li><li>寒暄语</li><li>署名及日期</li></ul><p>以下是具体的模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">XXX教授&#x2F;博士：</span><br><span class="line"></span><br><span class="line">您好！</span><br><span class="line"></span><br><span class="line">感谢您百忙之中抽出时间查看这封邮件！</span><br><span class="line"></span><br><span class="line">我是XXX，本科就读于XXX，学的是XXX专业，今年 6 月毕业；</span><br><span class="line">本科期间专业综合排名XX名，拿过XX奖学金；</span><br><span class="line">本次报考贵校XX专业（学硕和专硕一定要注明），初试总分 XXX （XX&#x2F;XX&#x2F;XX&#x2F;XX，排名&#x2F;进复试人数），</span><br><span class="line">复试总分 XXX，总成绩 XX（排名&#x2F;录取人数），已被拟录取。</span><br><span class="line"></span><br><span class="line">本科期间，我从XXX(时间)开始跟一位老师做了 XX 的研究(项目)。</span><br><span class="line">···（具体介绍科研经历及项目）。</span><br><span class="line">在此期间，我学到了 XXX，对 XXX 产生了浓厚的兴趣。</span><br><span class="line">这一段研究经历除了引起我的兴趣以外，我觉得更重要的一点是磨练了我的XXX，培养了 XXX 精神。</span><br><span class="line"></span><br><span class="line">在本科阶段，我也积极参加各种校级、省级的学科竞赛，获得了XX、XX、XX奖项。</span><br><span class="line">英语方面，我四六级都已经通过，其中四级 XXX ，六级 XXX 。</span><br><span class="line">专业技能方面，我熟悉 XXX，会使用 XXX。（附件是我的个人简历和主要证书，欢迎您下载查看）</span><br><span class="line"></span><br><span class="line">我在研究生导师介绍中找到您的主页，并且十分佩服您在XXX等方向多年的研究积淀和前瞻性的行业洞察；</span><br><span class="line">我本身对此十分感兴趣。</span><br><span class="line">因此，我希望加入您的组，接受您的任意研究工作安排。（这一块要针对导师的具体介绍，做个性化设计）</span><br><span class="line"></span><br><span class="line">不知道您是否还有研究生名额？您对研究生的要求是怎样的？期待您的回复！</span><br><span class="line"></span><br><span class="line">最后，祝愿老师身体健康，工作顺利！</span><br><span class="line"></span><br><span class="line">此致</span><br><span class="line"></span><br><span class="line">敬礼！</span><br><span class="line"></span><br><span class="line">署名</span><br><span class="line">日期</span><br></pre></td></tr></table></figure><p>在自荐信书写过程中，最好加粗邮件中的关键词或关键句子，以提高导师阅读邮件效率。自荐信书写完后，建议先自己阅读一遍，检查是否存在错别字，专业名词及缩写、大小写是否符合规范。保证内容无误后，推荐先给自己其他邮箱发一份，作为测试。看看不同终端（网页端、电脑客户端、平板端、手机端等）的阅读体验，将格式（如字号、缩进、空格等等）调整至一个最佳的阅读状态。这些细节都调整好后，就可以准备发自荐信了。</p><h1 id="如何设置发信邮箱"><a href="#如何设置发信邮箱" class="headerlink" title="如何设置发信邮箱"></a>如何设置发信邮箱</h1><p>在发信之前，需要选择合适的邮箱，并进行合理的设置。对于邮箱的选择，国内各大主流邮箱都可以作为发信邮箱。当然，你也可以使用某个 404 网站的邮箱。而在邮箱设置中，最重要的是合理修改自己的发信昵称，一般设置为自己的真实姓名，方便导师辨别。不然的话，使用奇怪的发信昵称，也许就会给导师留下不好的印象。另外，写好邮件的主题，也会方便导师查阅及回复。我是用的邮件主题是 <code>自荐信-姓名-专业（注明学硕、专硕）</code>。</p><p>除此以外，邮件也可以设置定时发送。定好合适的时间发送，可能也会有一些价值。具体我将在下一节介绍。</p><h1 id="如何选定自荐信发送的时机"><a href="#如何选定自荐信发送的时机" class="headerlink" title="如何选定自荐信发送的时机"></a>如何选定自荐信发送的时机</h1><p>发信的时间其实很重要，这在一定程度上决定了你能否抢到一些导师的名额。这里的时机又分为大时间和小时间。</p><p>大时间是指在什么阶段适合发自荐信。通常来说，如果你的初试成绩较高，可在复试之前，提前预定导师名额，抢先一步。这个阶段不建议海投，盯住几个，发送自荐信即可。如果你的初试成绩一般，本科有非常出色的经历，可以考虑发一些自荐信试试。如果初试成绩一般，本科也并不出色，我建议此阶段就不用花费精力打扰导师了，专心准备复试就行。在拟录取名单出来后，如果你被拟录取，那么要抓紧时间联系。这段时间，如果你没有肯定能选上的导师，请不要吝啬你的自荐信。多投！多投！多投！收不到回信也不用怕，不要停止发送，除非已经有你钟意的导师敲定要你。</p><p>小时间是指什么时间点投递自荐信。中午休息、下午下班或晚上晚饭后的时间较为合适。这些时间，很可能导师正在查阅邮件，回复所等待的时间也就会短一些。此外，一些导师也有不错的发信礼仪，他也会在与你投递的相同时间给你回信。这就极大地提高了及时回信的概率。我选择的时间是下午 5：00 ，推荐你也试试。</p><p>此外，我统计了我自己收到回复的时间情况，希望对你有所帮助。</p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/time.png" alt="回复时间直方图"></p><p>其中，晚上 8 点 到 9 点是回复的高峰期，推荐你此时保持邮件和手机畅通。</p><h1 id="如何回复导师的回信"><a href="#如何回复导师的回信" class="headerlink" title="如何回复导师的回信"></a>如何回复导师的回信</h1><p>一般几个星期没动静的邮件，基本都是凉了。而有的可能并不会给肯定答复。除非回复名额已满，否则需要盯紧其他回复的导师。比如发个相关研究的问题咨询，向导师要个微信等等。当导师向你递出橄榄枝，那么恭喜你，已经成功了第一步。如果你觉得这个导师还不错，那么赶紧和他讨论研究课题，询问学习任务，提早进入状态；如果你还想等其他导师的回复，那么可以再等一等。多个导师给你发 offer 后，请多与导师交流，敲定一个。对于其他接受你的导师，请礼貌地发一封邮件拒绝。（具体写法可在网上找到）</p><h1 id="彩蛋：一个多月的投信故事"><a href="#彩蛋：一个多月的投信故事" class="headerlink" title="彩蛋：一个多月的投信故事"></a>彩蛋：一个多月的投信故事</h1><div class="note warning">            <p>（声明：以下内容仅是我的主观回忆和感受，可能与事实存在出入。其中并不包含对任意个人、集体贬低的意思。如有，我对此深表惬意）</p>          </div><p>从拟录取公示之后，我着手开始查阅导师信息。看到感兴趣的，先将网页收藏起来（具体的，我使用新版 Edge 的集锦功能，类似收藏功能但比收藏好用，强推！），之后再细选。之后，我写好了自荐信的模板，在 5 月 22 日发了第一封。这封当晚收到回复！但是很遗憾，这名教授名额满了。经过几天的细选，我又发了一封。石沉大海！出师不利，让我郁闷了好几天，加上毕业设计最后的遗留工作，我不得不暂时停下了发信这件事（作者注：其实这块时间不能松懈，也许很多机会就是在这段时间内溜走了）。</p><p>到了 6 月初，忙完了毕设，赶紧重新拾起发自荐信的工作。现在回想起来，这段时间我还是发的太少，两周内平均一周只发了一封。其结果也不尽如人意，一封没动静，一封说今年名额还未分配完成，让我再等等。我还真是天真，就停下开始等待名额正式分配完成！我感觉，大致是辜负了这段时间，导致后期到处吃瘪。</p><p>6 月 23 日，考研 QQ 群里传来了名额分配的公示（一张打印的纸），我才突然缓过神来，我好像还没导师确定要我！就像期末考试前几天，复习效率贼高一样，这几天我发了发信总数 60 % 的自荐信，但大部分是失败告终（作者注：到这个时间点，基本大部分导师都报满了，只有少部分有名额，所以当你已经被拟录取了，自荐信一定不要停，别像我一样，弄得灰头土脸）。好不容易，有个确定回复。我一问学长、学姐，心又凉了半解。据不可靠消息，这名导师为什么到双选后期仍然有名额，我想你我都懂。</p><p>怎么办？要不等分配吧，我想。</p><p>但是，我可不想未来 3 年过的太难受。我重新审视了一遍我的邮件模板。将最后期待老师回复的内容部分中的 <code>您对研究生的要求是怎样的？</code> 替换成了 <code>如果您的名额已满，能否推荐给其他老师？</code> 。再次开始投递自荐信。</p><p>6 月 24 日晚上，一封回复重新点燃了我的热情！这位导师看了我的背景，似乎十分激动（我猜的），非常热情的向我推荐另一名非常优秀的导师，并指出他还有名额。回复完了，他又将我的自荐信抄送了一份给他推荐的导师。这还没完，他又电话联系了我，催我赶紧与他推荐的导师联系！已经晚上 10 点了，我赶紧打开电脑，针对这位导师重新改写了模板中的部分内容，随后就发了出去。这简直是我人生的高光时刻之一，被别人赏识的感觉真特么爽！结果就是，大概凌晨 2 点才睡着。</p><p>一觉过去，削减了不少激动的心情。不能在一棵树上吊死，万一这名优秀的导师看不上我，我岂不是彻底凉透了？虽然已经步入端午假期，但是我还是开始了又一轮邮件轰炸。名额已满！招满了！请联系其他导师！大概是这几天，我看到的最多的回复。上面提到的仍有名额的导师仍未回复我，也许他在端午休息，并不会处理工作相关的事情。</p><p>26 号，终于又有一名导师看上我了！并且，最重要的是，他还有名额！卧槽，没想到最后我还能捡个漏！我立马回复，向导师咨询研究课题。他回复到，第二天通过视频简单交流一下。我以为第二天他还要考核一下我，没想到交流还是比较轻松愉快的。导师介绍了目前的研究方向，项目等信息。我也对此有点兴趣。于是一拍即合，定了，终于定了！</p><p>没想到，端午节的最后一天晚上，之前那名有名额的导师打电话来，似乎对我感兴趣。哎，没办法，我已经敲定另一名导师了，只好拒绝。人生最美的遗憾也许就是这样。</p><p>总的来说，我在投递自荐信阶段有些懈怠。自己本身有几张不错的牌，差点打得稀巴烂！还好，想要努力的时候什么时候都不会迟，运气可能就会在适当的时间到来。</p><p>努力吧，永远不要停下来啊（团长状）！</p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/ath7s-kr3ys.jpg" alt="团长状"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>最近看了一些文章、视频和学长们的感受，研究生的三年似乎并不如想象的那么轻松愉快，还是十分紧张和紧凑的。不要有太多期待，也不要完全放弃幻想，一个平常心对待即可。</p><p>最后，祝愿正在准备考研的读者一战成硕，一研为定！</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><p><a href="https://cosmosning.github.io/2020/03/02/yi-wen-cheng-xu-yuan-shi-ru-he-pai-ban-jian-li-de/">译文-程序员是如何排版简历的</a></p>]]></content>
    
    <summary type="html">
    
      回顾自身经历，介绍研究生自荐信的写法
    
    </summary>
    
    
      <category term="考研" scheme="https://cosmosning.github.io/categories/%E8%80%83%E7%A0%94/"/>
    
    
      <category term="研究生" scheme="https://cosmosning.github.io/tags/%E7%A0%94%E7%A9%B6%E7%94%9F/"/>
    
      <category term="自荐信" scheme="https://cosmosning.github.io/tags/%E8%87%AA%E8%8D%90%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>Vim简易入门</title>
    <link href="https://cosmosning.github.io/2020/06/15/vim-jian-yi-ru-men/"/>
    <id>https://cosmosning.github.io/2020/06/15/vim-jian-yi-ru-men/</id>
    
    
    <author>
    <name>CosmosNing</name>
    <uri>https://cosmosning.github.io/about</uri>
    </author>
    
    
    <published>2020-06-15T04:07:06.000Z</published>
    <updated>2020-06-30T14:56:45.064Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近，笔者在学习 Linux 中的常见命令。其中 Vim 作为文本编辑命令，是十分基础又非常强大的工具。然而，许多开发者因其命令繁琐，上手难度大，并没有完全发挥出 Vim 的潜力。因此，本文将介绍 Vim 的常见命令及其用法，供读者参考。通过本文，你将获得：</p><ol><li>了解 Vim 的四种模式。</li><li>掌握 Vim 常见文本编辑命令。</li></ol></blockquote><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/kdwk-leung-nupZCrr61Fg-unsplash.jpg" alt="题图"></p><p>Photo by <a href="https://unsplash.com/@kdwk?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText" target="_blank" rel="noopener">Kdwk Leung</a> on <a href="https://unsplash.com/t/nature?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p><h1 id="什么是-Vim？"><a href="#什么是-Vim？" class="headerlink" title="什么是 Vim？"></a>什么是 Vim？</h1><p>Vim 是 <strong>Vi</strong> I<strong>M</strong>proved 的缩写。它是由 Bram Moolenaar 开发的开源免费文本编辑器。顾名思义，Vim 基于 Vi（另一个早期的文本编辑器） 但又不止于 Vi。由于其强大的文本处理功能，在很多类 Unix 系统中，Vim 都成了默认的文本编辑器。尤其在无图形化界面的服务器上，Vim 成为了绝大部分运维人员线上运维的选择。</p><p>很多 Linux 发行版都内置了 Vim 命令，只需打开终端，输入如下命令，即可使用 Vim。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/vim.PNG" alt="Vim"></p><h1 id="Vim-的四种模式"><a href="#Vim-的四种模式" class="headerlink" title="Vim 的四种模式"></a>Vim 的四种模式</h1><p>Vim 中的四种模式是 Vim 的核心设计理念之一。以四种模式为基础，理解和使用 Vim 的文本编辑命令就会容易许多。</p><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>Vim 中有四种模式，分别是：</p><ul><li>正常模式（Normal Mode）：用于查看文本和执行复制、粘贴等文本操作命令。</li><li>插入模式（Insert Mode）：用于编辑文本。</li><li>命令模式（Command Mode）：用于执行指定命令。</li><li>可视模式（Visual Mode）：用于选中文本。</li></ul><h2 id="正常模式（Normal-Mode）"><a href="#正常模式（Normal-Mode）" class="headerlink" title="正常模式（Normal Mode）"></a>正常模式（Normal Mode）</h2><p>在 Vim 打开文件或者新建文件时，默认进入的模式是正常模式。在正常模式下，使用键盘直接输入字母或者数字，可能不会出现类似编辑文本时的结果。也就是说，该模式下，文本无法直接编辑。然而，通过某些特定的指令，可以完成一些常见的文本操作命令。</p><h3 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h3><p>光标的位置将决定复制、粘贴等操作的位置，因此光标的操作于文本操作十分重要。不同于当前拥有图形界面的文字处理软件，Vim 中无法使用鼠标指定光标位置，而是使用键盘指令，完成光标的移动。这一设计，使得 Vim 无需鼠标，即可完成文本编辑的任务。这大大提高了文本编辑的效率。</p><p>Vim 的光标移动又可以分为两类。分别是<strong>小范围移动</strong>、<strong>大范围移动</strong>。</p><p>在<strong>小范围移动</strong>中，只涉及到四个字母 <code>h</code>、<code>j</code>、<code>k</code>、<code>l</code>，分别代表<strong>左、下、上、右</strong>（相当于键盘上的光标键）</p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/cursorSD.png" alt="小范围移动光标"></p><div class="note info">            <p>部分 Vim 版本支持<strong>光标键</strong>移动光标，但仍有部分 Vim 不支持（由于相关操作系统会将光标键解释为其他字符），推荐熟练掌握 <code>h</code>、<code>j</code>、<code>k</code>、<code>l</code> 指令，完成小范围移动光标的任务。</p>          </div><p>在<strong>大范围移动</strong>中，可以通过 <code>g</code>、<code>G</code> 快速跳转到<strong>第一行</strong>和<strong>最后一行</strong>；在 <code>G</code> 前加上数字，就可以跳转到指定行；<code>^</code>、<code>$</code> 则可以跳转到光标所在行的行首和行尾。这些移动方式将会极大地提高光标移动效率。</p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/cursorLD.png" alt="大范围移动光标"></p><h3 id="常见文本操作"><a href="#常见文本操作" class="headerlink" title="常见文本操作"></a>常见文本操作</h3><p>在正常模式下，除了可以移动光标，也可以执行一些简单的文本操作命令。具体的如下表所示：</p><table><thead><tr><th align="center">功能</th><th align="center">指令</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">复制</td><td align="center"><code>yy</code></td><td align="center">复制整行</td></tr><tr><td align="center"></td><td align="center"><code>&lt;数字&gt;yy</code></td><td align="center">复制当前光标所在行开始，连续&lt;数字&gt;行的文本</td></tr><tr><td align="center"></td><td align="center"><code>y$</code>（y +shift +4）</td><td align="center">复制从当前光标所在字符开始，到本行末尾的文本</td></tr><tr><td align="center">粘贴</td><td align="center"><code>p</code></td><td align="center">粘贴复制结果</td></tr><tr><td align="center">剪切</td><td align="center"><code>dd</code></td><td align="center">剪切整行</td></tr><tr><td align="center"></td><td align="center"><code>d$</code></td><td align="center">剪切从当前光标所在字符开始，到本行末尾的文本</td></tr><tr><td align="center">撤销</td><td align="center"><code>u</code></td><td align="center">撤销命令</td></tr><tr><td align="center">重做</td><td align="center"><code>ctrl + r</code></td><td align="center">重做命令</td></tr><tr><td align="center">删除单个字符</td><td align="center"><code>x</code></td><td align="center">将当前光标位置的字符删除</td></tr><tr><td align="center">替换单个字符</td><td align="center"><code>r+&lt;指定字符&gt;</code></td><td align="center">将当前光标位置的字符替换为指定字符</td></tr></tbody></table><h2 id="插入模式（Insert-Mode）"><a href="#插入模式（Insert-Mode）" class="headerlink" title="插入模式（Insert Mode）"></a>插入模式（Insert Mode）</h2><p>在正常模式中，用户无法直接编辑文本。而如果需要直接编辑文本，则需要进入插入模式。插入模式有多种进入方式。具体如下：</p><table><thead><tr><th align="center">进入命令</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">按 <code>i</code> 进入</td><td align="center">光标会在原位</td></tr><tr><td align="center">按 <code>I</code>（大写 i：shift + i）进入</td><td align="center">光标会在本行开头</td></tr><tr><td align="center">按 <code>a</code> 进入</td><td align="center">光标会在原位的下一位</td></tr><tr><td align="center">按 <code>A</code>（shift + a）进入</td><td align="center">光标会在本行最后一个字符的下一位</td></tr><tr><td align="center">按 <code>o</code> 进入</td><td align="center">光标会在当前行的下面另起一行</td></tr><tr><td align="center">按 <code>O</code> （shift + o）进入</td><td align="center">光标会在当前行的上面另起一行</td></tr></tbody></table><p>进入插入模式之后，就可以直接编辑文本了。编辑完成后，可以按 <code>ESC</code> 键返回正常模式。</p><h2 id="命令模式（Command-Mode）"><a href="#命令模式（Command-Mode）" class="headerlink" title="命令模式（Command Mode）"></a>命令模式（Command Mode）</h2><p>当处于正常模式时，按 <code>:</code> 键可进入命令模式。在命令模式下，可执行更多丰富的命令。这些命令大致可分为两类，一类命令用于设置 Vim 编辑器的属性，另一类则用来完成文件、文本操作任务。</p><h3 id="Vim-设置"><a href="#Vim-设置" class="headerlink" title="Vim 设置"></a>Vim 设置</h3><p>vim 设置的一般格式如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">: <span class="built_in">set</span> &lt;设置项&gt;</span><br></pre></td></tr></table></figure><p>如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">: <span class="built_in">set</span> nu</span><br></pre></td></tr></table></figure><p>可显示行号。</p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/setnu.PNG" alt="Vim 显示行号"></p><p>然而，上述设置方式仅对当前编辑文本进程有效，如需永久生效，则要修改 <code>/etc/vimrc</code> 文件。</p><h3 id="文件、文本操作"><a href="#文件、文本操作" class="headerlink" title="文件、文本操作"></a>文件、文本操作</h3><p>在命令模式下，Vim 可以执行一些文件操作命令，如保存、退出等；亦可执行更加复杂的文本操作命令，如查找、替换等。</p><table><thead><tr><th align="center">功能</th><th align="center">命令</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">保存</td><td align="center"><code>: w &lt;文件名&gt;</code></td><td align="center">保存新文件</td></tr><tr><td align="center"></td><td align="center"><code>: w</code></td><td align="center">表示保存到当前文件</td></tr><tr><td align="center">退出</td><td align="center"><code>: q</code></td><td align="center">退出 vim</td></tr><tr><td align="center"></td><td align="center"><code>: q !</code></td><td align="center">强制退出（默认不保存修改）</td></tr><tr><td align="center">执行其他命令</td><td align="center"><code>: ! &lt;命令&gt;</code></td><td align="center">执行 shell 命令</td></tr><tr><td align="center">查找操作</td><td align="center"><code>: /&lt;正则表达式&gt;</code></td><td align="center">按 <code>n</code> 查找下一个，<code>shift + n</code> 查找上一个</td></tr><tr><td align="center">替换操作</td><td align="center"><code>: s/&lt;旧字符或正则表达式&gt;/&lt;新字符或正则表达式&gt;</code></td><td align="center">针对当前光标所在行的字符进行替换</td></tr><tr><td align="center"></td><td align="center"><code>: %s/&lt;旧字符或正则表达式&gt;/&lt;新字符或正则表达式&gt;</code></td><td align="center">全文搜索替换一处</td></tr><tr><td align="center"></td><td align="center"><code>: %s/&lt;旧字符或正则表达式&gt;/&lt;新字符或正则表达式&gt;/g</code></td><td align="center">全文搜索、全部替换</td></tr><tr><td align="center"></td><td align="center"><code>: m,n s/&lt;旧字符或正则表达式&gt;/&lt;新字符或正则表达式&gt;/g</code></td><td align="center">指定行范围内替换，其中 m，n 为正整数</td></tr></tbody></table><h2 id="可视模式（Visual-Mode）"><a href="#可视模式（Visual-Mode）" class="headerlink" title="可视模式（Visual Mode）"></a>可视模式（Visual Mode）</h2><p>在复制等文本操作命令时，常常需要选中相关文本。这就需要进入 Vim 的可视模式。进入可视模式的方式比较常见的有 3 种，具体如下表所示：</p><table><thead><tr><th align="center">进入命令</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">按 <code>v</code> 进入</td><td align="center">字符可视模式，按行序以<strong>单个字符</strong>为单位进行选中操作</td></tr><tr><td align="center">按 <code>V</code> 进入</td><td align="center">行可视模式，按行序以<strong>单行</strong>为单位进行选中操作</td></tr><tr><td align="center">按 <code>ctrl + v</code> 进入</td><td align="center">块可视模式，以光标所在位置为顶点，自定义矩形块中的字符全部选定</td></tr></tbody></table><p>按 <code>ESC</code> 键返回正常模式。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文主要介绍了 Vim 的四种模式和四种模式下的文本编辑及操作命令，希望对读者有所帮助。</p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/06/Vim-Four-Modes.png" alt="Vim 四种模式"></p><h1 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h1><p><a href="https://www.bilibili.com/video/BV1Yt411X7mu" target="_blank" rel="noopener">【视频·中文】vim入门教程（共3讲） by 正月点灯笼</a></p><p><a href="https://www.tutorialspoint.com/vim/vim_quick_guide.htm" target="_blank" rel="noopener">【文本·英文】Vim - Quick Guide from tutorialspoint</a></p>]]></content>
    
    <summary type="html">
    
      介绍 Vim 的常见命令及其用法
    
    </summary>
    
    
      <category term="指南" scheme="https://cosmosning.github.io/categories/%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Vim" scheme="https://cosmosning.github.io/tags/Vim/"/>
    
      <category term="Linux" scheme="https://cosmosning.github.io/tags/Linux/"/>
    
      <category term="命令" scheme="https://cosmosning.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>C++中的浅拷贝和深拷贝</title>
    <link href="https://cosmosning.github.io/2020/05/18/c-zhong-de-qian-kao-bei-he-shen-kao-bei/"/>
    <id>https://cosmosning.github.io/2020/05/18/c-zhong-de-qian-kao-bei-he-shen-kao-bei/</id>
    
    
    <author>
    <name>CosmosNing</name>
    <uri>https://cosmosning.github.io/about</uri>
    </author>
    
    
    <published>2020-05-18T01:18:20.000Z</published>
    <updated>2020-06-30T14:56:45.064Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>（导读）短文一篇。主要介绍浅拷贝和深拷贝的含义以及在 C++ 中的实现</p></blockquote><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/05/cristian-lozan-lb5yppoIEWk-unsplash.jpg" alt="封面图片"></p><p>Photo by <a href="https://unsplash.com/@chrisslozan?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText" target="_blank" rel="noopener">Cristian Lozan</a> on <a href="https://unsplash.com/t/nature?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p><h1 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h1><p>先来看一个例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShallowCopyObject</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> basicType;</span><br><span class="line"><span class="keyword">int</span> *refType;</span><br><span class="line">ShallowCopyObject()</span><br><span class="line">&#123;</span><br><span class="line">basicType = <span class="number">10</span>;</span><br><span class="line">refType = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">refType[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我定义了一个 <code>ShallowCopyObject</code> 类，它包括两个成员变量</p><ol><li><code>basicType</code> ：类型为语言内置基本类型的 <code>int</code></li><li><code>refType</code> ：类型为指针，指向 <code>int</code> 类型数据</li></ol><p>与此同时，我还定义了一个无参构造函数，用于初始化 <code>basicType</code> 和 <code>refType</code> 的值。其中 <code>basicType</code> 初始化为 10；<code>refType</code> 初始化为一个大小为 10 的数组，依次存储 0~9 的整数。</p><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>假设主函数 <code>main</code> 中有如下语句，那么终端会输出什么呢？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ShallowCopyObject a;</span><br><span class="line">ShallowCopyObject b = a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Before changing value of b.basicType"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b.basicType "</span> &lt;&lt; b.basicType &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">b.basicType = <span class="number">233</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"After changing value of b.basicType"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a.basicType "</span> &lt;&lt; a.basicType &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b.basicType "</span> &lt;&lt; b.basicType &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>先自己分析一下，再上机敲一敲，看看自己的思路对不对。</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><p>类似的，下面的语句会输出什么呢？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ShallowCopyObject a;</span><br><span class="line">ShallowCopyObject b = a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Before changing value of b.refType[6]"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b.refType[6] "</span> &lt;&lt; b.refType[<span class="number">6</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">b.refType[<span class="number">6</span>] = <span class="number">666</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"After b.refType[6]"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a.refType[6] "</span> &lt;&lt; a.refType[<span class="number">6</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b.refType[6] "</span> &lt;&lt; b.refType[<span class="number">6</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>再试着自己分析一下，上机敲一敲，看看自己的思路对不对。</p><h1 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ShallowCopyObject a;</span><br><span class="line">ShallowCopyObject b = a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Before changing value of b.basicType"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b.basicType "</span> &lt;&lt; b.basicType &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">b.basicType = <span class="number">233</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"After changing value of b.basicType"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a.basicType "</span> &lt;&lt; a.basicType &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b.basicType "</span> &lt;&lt; b.basicType &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>第一个问题，也就是上面的代码，会输出如下结果</p><div class="note default">            <p>Before changing value of b.basicType<br>b.basicType 10<br>After changing value of b.basicType<br>a.basicType 10<br>b.basicType 233</p>          </div><p>由此可见，<strong>两个对象基本数据类型的成员变量是相互独立的，不会相互影响</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ShallowCopyObject a;</span><br><span class="line">ShallowCopyObject b = a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Before changing value of b.refType[6]"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b.refType[6] "</span> &lt;&lt; b.refType[<span class="number">6</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">b.refType[<span class="number">6</span>] = <span class="number">666</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"After b.refType[6]"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a.refType[6] "</span> &lt;&lt; a.refType[<span class="number">6</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b.refType[6] "</span> &lt;&lt; b.refType[<span class="number">6</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>而第二个问题，它的结果可能出乎意料：</p><div class="note default">            <p>Before changing value of b.refType[6]<br>b.refType[6] 6<br>After b.refType[6]<br>a.refType[6] 666<br>b.refType[6] 666</p>          </div><p>我们惊奇的发现，对 <code>b</code> 对象的成员变量修改，竟然影响到了 <code>a</code> 对象中的值！</p><p>这一切的原因，都是由于在C++ 中，默认对象之间的拷贝（包括默认复制构造函数和默认赋值语句）是浅拷贝。</p><h1 id="什么是浅拷贝？"><a href="#什么是浅拷贝？" class="headerlink" title="什么是浅拷贝？"></a>什么是浅拷贝？</h1><p>那么，什么是浅拷贝呢？</p><p>这里给出维基百科的定义：</p><blockquote><p>One method of copying an object is the shallow copy. In that case a new object B is created, and the fields values of A are copied over to B. This is also known as a field-by-field copy, field-for-field copy, or field copy. If the field value is a reference to an object (e.g., a memory address) it copies the reference, hence referring to the same object as A does, and if the field value is a primitive type it copies the value of the primitive type. In languages without primitive types (where everything is an object), all fields of the copy B are references to the same objects as the fields of original A. The referenced objects are thus shared, so if one of these objects is modified (from A or B), the change is visible in the other. Shallow copies are simple and typically cheap, as they can be usually implemented by simply copying the bits exactly.</p><p>(<a href="https://en.wikipedia.org/wiki/Object_copying#Shallow_copy" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Object_copying#Shallow_copy</a>)</p></blockquote><p>简单的来说，浅拷贝就是逐个字节的拷贝。也就是说，拷贝后每一个成员变量的值都相同。如果该值是基本数据类型，那么该值被拷贝；如果该值是引用数据类型（如对象、指针等），那么该值（注意：这里的值是指<strong>地址</strong>）也会被拷贝。</p><p>由此可知，针对第一个问题，由于改变的是基本类型的数据，它是独立的一份拷贝，因而另一个对象值的修改并不会影响被拷贝的对象；然而，在第二个问题中，由于浅拷贝，<code>b</code> 中 <code>refType</code> 指向了和 <code>a</code> 对象 <code>refType</code> 相同的位置（因为拷贝了地址），因而在 <code>b</code> 中修改 <code>refType</code> 数组中的值，会影响到对象 <code>a</code> 。</p><div class="note info">            <h2 id="一句话描述"><a href="#一句话描述" class="headerlink" title="一句话描述"></a>一句话描述</h2><p><strong>浅拷贝会共享引用数据类型成员变量（指针指向同一个地址），而不共享原始数据类型的成员变量</strong></p>          </div><h1 id="什么是深拷贝？"><a href="#什么是深拷贝？" class="headerlink" title="什么是深拷贝？"></a>什么是深拷贝？</h1><p>有时候，我们并不希望拷贝对象时，其引用成员变量指向同一个引用数据类型的数据对象，而希望它们指向不同的位置，但是这些位置存储的值是相同的。这就需要用到深拷贝。</p><p>在维基百科中，深拷贝是这样定义的：</p><blockquote><p>An alternative is a deep copy, meaning that fields are dereferenced: rather than references to objects being copied, new copy objects are created for any referenced objects, and references to these placed in B. The result is different from the result a shallow copy gives in that the objects referenced by the copy B are distinct from those referenced by A, and independent. Deep copies are more expensive, due to needing to create additional objects, and can be substantially more complicated, due to references possibly forming a complicated graph.</p><p>(<a href="https://en.wikipedia.org/wiki/Object_copying#Deep_copy" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Object_copying#Deep_copy</a>)</p></blockquote><div class="note info">            <h2 id="一句话描述"><a href="#一句话描述" class="headerlink" title="一句话描述"></a>一句话描述</h2><p><strong>深拷贝不会共享引用数据类型成员变量（它们的指针指向不同地址，但是拷贝后指针指向地址所存储的值是相等的），也不共享原始数据类型的成员变量</strong></p>          </div><h2 id="实现深拷贝"><a href="#实现深拷贝" class="headerlink" title="实现深拷贝"></a>实现深拷贝</h2><p>在 C++ 中可以自定义复制构造函数、重载赋值运算符，实现深拷贝。对于本文开头提出的问题，可以做如下改进。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义复制构造函数</span></span><br><span class="line">DeepCopyObject(<span class="keyword">const</span> DeepCopyObject &amp;obj)</span><br><span class="line">&#123;</span><br><span class="line">    basicType = obj.basicType;</span><br><span class="line">    refType = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];        <span class="comment">// 引用类型成员变量重新申请空间</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)  <span class="comment">// 将值逐个拷贝到新申请的空间中</span></span><br><span class="line">    &#123;</span><br><span class="line">        refType[i] = obj.refType[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重载赋值运算符</span></span><br><span class="line">DeepCopyObject &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> DeepCopyObject &amp;obj)</span><br><span class="line">&#123;</span><br><span class="line">    basicType = obj.basicType;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;obj) <span class="comment">// obj = obj; 情况</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">delete</span>[] refType;</span><br><span class="line">    refType = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        refType[i] = obj.refType[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>浅拷贝会<strong>共享</strong>引用数据类型成员变量（指针指向<strong>同一个地址</strong>），而<strong>不共享</strong>原始数据类型的成员变量</li><li>深拷贝<strong>不会共享</strong>引用数据类型成员变量（它们的指针指向<strong>不同</strong>地址，但是拷贝后指针指向地址所存储的<strong>值是相等的</strong>），也<strong>不共享</strong>原始数据类型的成员变量</li><li>在 C++ 中可以<strong>自定义复制构造函数</strong>、<strong>重载赋值运算符</strong>，<strong>实现深拷贝</strong></li></ul><h1 id="附：实现深拷贝完整代码"><a href="#附：实现深拷贝完整代码" class="headerlink" title="附：实现深拷贝完整代码"></a>附：实现深拷贝完整代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeepCopyObject</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> basicType;</span><br><span class="line"><span class="keyword">int</span> *refType;</span><br><span class="line"></span><br><span class="line">DeepCopyObject()</span><br><span class="line">&#123;</span><br><span class="line">basicType = <span class="number">10</span>;</span><br><span class="line">refType = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">refType[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DeepCopyObject(<span class="keyword">const</span> DeepCopyObject &amp;obj)</span><br><span class="line">&#123;</span><br><span class="line">basicType = obj.basicType;</span><br><span class="line">refType = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">refType[i] = obj.refType[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~DeepCopyObject()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (refType)</span><br><span class="line"><span class="keyword">delete</span>[] refType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DeepCopyObject &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> DeepCopyObject &amp;obj)</span><br><span class="line">&#123;</span><br><span class="line">basicType = obj.basicType;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;obj) <span class="comment">// obj = obj; 情况</span></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">delete</span>[] refType;</span><br><span class="line">refType = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">refType[i] = obj.refType[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">DeepCopyObject a;</span><br><span class="line">DeepCopyObject b = a; <span class="comment">// 调用 DeepCopyObject(const DeepCopyObject &amp; obj)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// b = a; // 调用 DeepCopyObject &amp; operator=(const DeepCopyObject &amp; obj)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Before changing value of b.basicType"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b.basicType "</span> &lt;&lt; b.basicType &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">b.basicType = <span class="number">233</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"After changing value of b.basicType"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a.basicType "</span> &lt;&lt; a.basicType &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b.basicType "</span> &lt;&lt; b.basicType &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Before changing value of b.refType[6]"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b.refType[6] "</span> &lt;&lt; b.refType[<span class="number">6</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">b.refType[<span class="number">6</span>] = <span class="number">666</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"After b.refType[6]"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a.refType[6] "</span> &lt;&lt; a.refType[<span class="number">6</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b.refType[6] "</span> &lt;&lt; b.refType[<span class="number">6</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      介绍浅拷贝和深拷贝的含义以及在 C++ 中的实现
    
    </summary>
    
    
      <category term="C++" scheme="https://cosmosning.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://cosmosning.github.io/tags/C/"/>
    
      <category term="浅拷贝" scheme="https://cosmosning.github.io/tags/%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    
      <category term="深拷贝" scheme="https://cosmosning.github.io/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo搭建并部署个人博客</title>
    <link href="https://cosmosning.github.io/2020/03/12/shi-yong-hexo-da-jian-bing-bu-shu-ge-ren-bo-ke/"/>
    <id>https://cosmosning.github.io/2020/03/12/shi-yong-hexo-da-jian-bing-bu-shu-ge-ren-bo-ke/</id>
    
    
    <author>
    <name>CosmosNing</name>
    <uri>https://cosmosning.github.io/about</uri>
    </author>
    
    
    <published>2020-03-12T15:15:36.000Z</published>
    <updated>2020-06-30T14:56:45.064Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前段时间，看到 Hexo 官方文档更新了使用 TravisCI 自动化部署部分。趁着这个机会，我将我的博客重新构建了一遍。这里记下简略过程，供读者参考。通过本篇文章，你将获得：</p><ol><li>使用 Hexo 构建静态博客</li><li>简单配置 NexT 主题</li><li>使用 TravisCI + GitHubPages 完成自动化部署</li></ol></blockquote><h1 id="前置需求"><a href="#前置需求" class="headerlink" title="前置需求"></a>前置需求</h1><p>在安装 Hexo 之前，你必须保证你的机器上安装了<strong>Node.js</strong>及<strong>Git</strong>。如果你未安装，你需要到如下网址，下载安装。</p><ul><li>Node.js：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></li><li>Git：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></li></ul><p>然后，你可以在命令行中输入如下命令，完成 <strong>Hexo</strong> 的安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br></pre></td></tr></table></figure><p>此外，为了部署在 Github 上，你需要有一个 <strong>GitHub 账号</strong>。如果没有，你可以到<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>注册一个。</p><h1 id="Hexo-最小配置"><a href="#Hexo-最小配置" class="headerlink" title="Hexo 最小配置"></a>Hexo 最小配置</h1><p>打开命令行（Windows 上可以使用 <strong>Git Bash</strong> 或者 <strong>PowerShell</strong>），输入如下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>等待片刻，<strong>Hexo</strong> 会帮我们做初始化网站的工作。</p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/hexo-init-blog.PNG" alt="Hexo初始化"></p><p>为方便后面部署，我们在 <code>blog</code> 中初始化一个 git 仓库，并配置好 git 相关信息。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 blog 文件夹</span></span><br><span class="line">cd blog</span><br><span class="line"><span class="comment"># 初始化 Git 仓库</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment"># 查看 Git 状态</span></span><br><span class="line">git status</span><br><span class="line"><span class="comment"># 配置个人信息（与你注册 GitHub 的用户名、邮箱一致）</span></span><br><span class="line">git config -<span class="literal">-local</span> user.name &lt;你的用户名&gt;</span><br><span class="line">git config -<span class="literal">-local</span> user.email &lt;你的邮箱名&gt;</span><br><span class="line"><span class="comment"># 查看配置，user.name、user.email 是否配置成功</span></span><br><span class="line">git config -<span class="literal">-local</span> -<span class="literal">-list</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/git-init-and-config.PNG" alt="初始化Git仓库"></p><p>接着，将仓库里的已有改动添加、提交。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit <span class="literal">-m</span> <span class="string">"init with hexo-cli"</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/git-add-and-commit.PNG" alt="Git提交改动"></p><p>在 blog 根目录，使用任意文本编辑器打开 <code>_config.yml</code> 文件，并在 <code>#Site</code> 部分输入你网站的信息。一个示例如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">CosmosNing的个人博客</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">探索·好奇</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">编程·学习·生活</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">个人博客;编程;学习;生活</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">CosmosNing</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure><p>到现在， Hexo 最小配置已经完成。我们来看看效果如何。继续在命令行下输入如下命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果使用 PowerShell，则选择输入下一条命令（下同）</span></span><br><span class="line">hexo g; hexo s</span><br><span class="line"><span class="comment"># 如果使用 Git Bash 或者 Linux 终端，则选择输入下一条命令（下同）</span></span><br><span class="line">hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/hexo-g-and-hexo-s.PNG" alt="Hexo本地预览命令"></p><p>打开浏览器，访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><p>你应该能得到类似这个画面</p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/basic-result.PNG" alt="Hexo最小化配置效果"></p><div class="note info">            <h2 id="提示-终止预览"><a href="#提示-终止预览" class="headerlink" title="提示-终止预览"></a>提示-终止预览</h2><p>你可以在命令行中，按下 <code>Ctrl + C</code> 终止上述预览命令</p>          </div><h1 id="设置-NexT-主题"><a href="#设置-NexT-主题" class="headerlink" title="设置 NexT 主题"></a>设置 NexT 主题</h1><p>默认的主题不太美观，而且功能有限。下面，我将介绍目前 <strong>Hexo</strong> 中最受欢迎的主题——NexT 的安装与配置。</p><h2 id="最小配置"><a href="#最小配置" class="headerlink" title="最小配置"></a>最小配置</h2><p>首先，在命令行中输入如下命令，安装 <strong>NexT</strong> 主题</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme<span class="literal">-next</span>/hexo<span class="literal">-theme</span><span class="literal">-next</span> themes/next</span><br></pre></td></tr></table></figure><p>使用文本编辑器，打开项目根目录的 <code>_config.yml</code> 文件，将 <code>theme</code> 配置成 <code>next</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><p>至此，<strong>NexT</strong> 最小配置已经完成。我们来看看效果吧</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean; hexo g; hexo s</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/next-hexo-g.PNG" alt="Hexo本地预览"></p><p>打开浏览器，访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><p>你应该能得到类似这个画面</p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/next-basic-result.PNG" alt="next最小配置效果"></p><p>使用 <code>Ctrl + C</code> 终止上述命令。接下来，我们将这一阶段的改动提交到 Git 仓库。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 NexT 主题作为子模块加入仓库</span></span><br><span class="line">git submodule add https://github.com/theme<span class="literal">-next</span>/hexo<span class="literal">-theme</span><span class="literal">-next</span> themes/next</span><br><span class="line"><span class="comment"># 添加改动至暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment"># 提交</span></span><br><span class="line">git commit <span class="literal">-m</span> <span class="string">"add common site config with theme next(default config)"</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/git-commit-next-default.PNG" alt="NexT最小化配置提交"></p><h2 id="配置功能页面及资源文件"><a href="#配置功能页面及资源文件" class="headerlink" title="配置功能页面及资源文件"></a>配置功能页面及资源文件</h2><p>一个完整的博客应该包括 <code>主页</code> 、<code>分类</code>、<code>标签</code>、 <code>归档</code> 等功能页面。而在 <strong>Hexo</strong> 帮我们初始化时，只是完成了博文页的设置。其他功能页需要手动设置。具体步骤如下</p><ul><li>创建 <code>关于</code> 页</li></ul><p>在项目根目录下的 <code>source</code> 文件夹中，创建一个 <code>about</code> 文件夹。在 <code>about</code> 文件夹下，创建 <code>index.md</code> ，并在 <code>index.md</code> 中输入如下文字：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 关于我</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">在这里输入你的个人介绍</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>创建 <code>分类</code> 页</li></ul><p>在项目根目录下的 <code>source</code> 文件夹中，创建一个 <code>categories</code> 文件夹。在 <code>categories</code> 文件夹下，创建 <code>index.md</code> ，并在 <code>index.md</code> 中输入如下文字：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">type: "categories"</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ul><li>创建 <code>标签云</code> 页</li></ul><p>在项目根目录下的 <code>source</code> 文件夹中，创建一个 <code>tags</code> 文件夹。在 <code>tags</code> 文件夹下，创建 <code>index.md</code> ，并在 <code>index.md</code> 中输入如下文字：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签云</span><br><span class="line">type: "tags"</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>至此，你可以在 <code>_config.yml</code> 配置使用这些页面</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加主题配置</span></span><br><span class="line"><span class="attr">theme_config:</span></span><br><span class="line">  <span class="attr">menu:</span></span><br><span class="line">    <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">    <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">    <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br></pre></td></tr></table></figure><p>另外，你可以将博客中常用的图片（如 logo 、头像等）内置在博客站点中。你需要在项目根目录下的 <code>source</code> 文件夹中，创建 <code>images</code> 文件夹。然后将图片文件拷贝到这里即可。这样，你在 <code>_config.yml</code> 中可以通过 <code>/images/&lt;图片名&gt;</code> 来引用。</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p><strong>Hexo</strong> 开放的设计使得开发者可以通过插件的方式增强其能力。为了使得我们的博客功能更加完善，这里我们需要安装一些有用的插件。</p><ul><li><a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a></li></ul><p><code>hexo-generator-feed</code> 是一个 RSS Feed 生成器，通过它可以为我们的博客生成可用于 RSS 订阅的文件。默认配置下，它会在你的站点根目录生成 <code>atom.xml</code> 。</p><p>你可以输入如下命令安装插件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-generator</span><span class="literal">-feed</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><p>然后，在 <code>_config.yml</code> 中配置使用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">' '</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line">  <span class="comment"># 这个是自定义的 icon</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">/images/avatar-32.ico</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/theme-next/hexo-generator-searchdb" target="_blank" rel="noopener">hexo-generator-searchdb</a></li></ul><p><code>hexo-generator-searchdb</code>是一个本地搜索索引生成器，通过它可以为我们的博客生成可用于本地搜索的文件。默认配置下，它会在你的站点根目录生成 <code>search.xml</code> 。你不需要额外书写搜索算法，因为强大的 <code>NexT</code> 主题已经内置了搜索功能。</p><p>你可以输入如下命令安装插件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-generator</span><span class="literal">-searchdb</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><p>然后，在 <code>_config.yml</code> 中配置使用：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme_config:</span></span><br><span class="line">  <span class="comment"># 注意需要将下列配置增加在 theme_config 中，并保持相对缩进</span></span><br><span class="line">  <span class="attr">local_search:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">    <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">    <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">    <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">    <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">    <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">    <span class="attr">preload:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/viko16/hexo-permalink-pinyin" target="_blank" rel="noopener">hexo-permalink-pinyin</a></li></ul><p><code>hexo-permalink-pinyin</code>是一个中文链接转拼音的工具，使用它有助于搜索引擎的抓取我们的博客页面（当然，如果你部署在 GitHub 上，百度无法抓取，因为 GitHub 禁止百度对此类页面的抓取）。</p><p>你可以输入如下命令安装插件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo<span class="literal">-permalink</span><span class="literal">-pinyin</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><p>然后，在 <code>_config.yml</code> 中配置使用：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink_pinyin:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">separator:</span> <span class="string">'-'</span> <span class="comment"># default: '-'</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener">hexo-symbols-count-time</a></li></ul><p><code>hexo-symbols-count-time</code>是一个统计文章字数、估计阅读时间的工具，使用它有助于读者提高阅读效率。</p><p>你可以输入如下命令安装插件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-symbols</span><span class="literal">-count</span><span class="literal">-time</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><p>然后，在 <code>_config.yml</code> 中配置使用：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme_config:</span></span><br><span class="line">  <span class="comment"># 注意需要将下列配置增加在 theme_config 中，并保持相对缩进</span></span><br><span class="line">  <span class="attr">symbols_count_time:</span></span><br><span class="line">    <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">exclude_codeblock:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">awl:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">wpm:</span> <span class="number">300</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="noopener">hexo-generator-sitemap</a></li></ul><p><code>hexo-generator-sitemap</code>是一个生成网站 <code>sitemap</code> 工具，你可以主动将生成的 <code>sitemap.xml</code> 提交给搜索引擎，这样搜索引擎就可以更好的抓取你的博文。</p><p>你可以输入如下命令安装插件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-generator</span><span class="literal">-sitemap</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><p>然后，在 <code>_config.yml</code> 中配置使用：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line">    <span class="attr">rel:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>至此，插件部分已配置完成。</p><div class="note info">            <h2 id="提示-更多配置"><a href="#提示-更多配置" class="headerlink" title="提示-更多配置"></a>提示-更多配置</h2><p>更多 NexT 主题的配置，可以查看 <code>themes/next/_config.yml</code>，将你需要改动的配置拷贝到根目录下 <code>_config.yml</code> 中的 <code>theme_config</code> 结点下。（<a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/DATA-FILES.md#选择-1hexo-方式" target="_blank" rel="noopener">参考</a>）</p><p>如果你懒得自定义，可以参考我的<a href="https://github.com/CosmosNing/CosmosNing.github.io/blob/source/_config.yml" target="_blank" rel="noopener">主题配置</a></p>          </div><p>我们来看看效果如何。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean; hexo g; hexo s</span><br></pre></td></tr></table></figure><p>打开浏览器，访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><p>我得到了以下画面</p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/my-result.PNG" alt="效果预览"></p><h2 id="定制主题颜色及简单样式"><a href="#定制主题颜色及简单样式" class="headerlink" title="定制主题颜色及简单样式"></a>定制主题颜色及简单样式</h2><p>NexT 主题非常灵活，用户可以高度自定义，包括颜色，布局等。本节将浅显的介绍如何自定义主题的颜色及样式。</p><div class="note default">            <p>推荐你使用 <code>Chrome</code> 浏览器作为调试工具</p>          </div><p>首先，在根目录的 <code>source</code> 文件夹下创建 <code>_data</code> 文件夹。在 <code>_data</code> 文件夹下，创建 <code>styles.styl</code> 文件。</p><p>然后，配置根目录下 <code>_config.yml</code> ，以确保生成器将使用你自定义的样式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme_config:</span></span><br><span class="line">  <span class="comment"># 注意需要将下列配置增加在 theme_config 中，并保持相对缩进</span></span><br><span class="line">  <span class="attr">custom_file_path:</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure><p>接下来，我们就可以使用 <code>Chrome</code> 浏览器对主题的样式进行微调。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地预览命令</span></span><br><span class="line">hexo clean; hexo g; hexo s</span><br></pre></td></tr></table></figure><p>打开浏览器，访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><p>按下 <code>F12</code> 打开<code>Chrome</code> 浏览器开发者工具。并点选左上角红框所示的按钮。这样，你就可以使用鼠标快速找到网页中某块元素的样式。然后修改右半部分（如蓝框所示） <code>Styles</code> 的样式，并观察网页效果。如果合适，将对应的样式类，复制到上述创建的 <code>styles.styl</code> 文件中，并保存。下次预览生成，你就会得到定制化的主题样式。</p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/ChromeDevTools.PNG" alt="ChromeDevTools"></p><div class="note default">            <p>点<a href="https://github.com/CosmosNing/CosmosNing.github.io/blob/source/source/_data/styles.styl" target="_blank" rel="noopener">这里</a>，查看我的样式配置。</p>          </div><p>至此，我们的主题配置已经完成。下面，将改动提交至仓库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit <span class="literal">-m</span> <span class="string">"&lt;你的提交信息&gt;"</span></span><br></pre></td></tr></table></figure><h1 id="使用-TravisCI-GitHubPages-实现自动化部署"><a href="#使用-TravisCI-GitHubPages-实现自动化部署" class="headerlink" title="使用 TravisCI + GitHubPages 实现自动化部署"></a>使用 TravisCI + GitHubPages 实现自动化部署</h1><h2 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h2><p>由于 Github Pages 目前只是支持 master 分支的页面渲染，所以我们需要提前做一些准备工作。打开命令行，输入如下命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于最新提交，创建名为 source 的分支</span></span><br><span class="line">git branch source</span><br><span class="line"><span class="comment"># 切换到 source 分支</span></span><br><span class="line">git checkout source</span><br><span class="line"><span class="comment"># 删除 master ，供静态页面的部署</span></span><br><span class="line">git branch <span class="literal">-d</span> master</span><br></pre></td></tr></table></figure><h2 id="创建-GithubPages-仓库"><a href="#创建-GithubPages-仓库" class="headerlink" title="创建 GithubPages 仓库"></a>创建 GithubPages 仓库</h2><p>登录你的 GitHub 账号，在主页的左侧，点击 <code>New</code> ，新建一个 GithubPages 仓库。你应该将其命名为 <code>&lt;你的 GitHub 用户名&gt;.github.io</code>，并点击 <code>Create repository</code> 完成创建。</p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/new-repo.png" alt="创建仓库"></p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/new-repo-info.PNG" alt="填写仓库信息"></p><p>接下来，需要将本地的博客仓库，推送到 GitHub。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:&lt;你的用户名&gt;/&lt;你的用户名&gt;.github.io.git</span><br><span class="line">git push <span class="literal">-u</span> origin source</span><br></pre></td></tr></table></figure><h2 id="创建-Personal-Access-Token"><a href="#创建-Personal-Access-Token" class="headerlink" title="创建 Personal Access Token"></a>创建 Personal Access Token</h2><p>在浏览器新建一个标签页，前往 GitHub <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">新建 Personal Access Token</a>，只勾选 <code>repo</code> 的权限并生成一个新的 Token。Token 生成后请<strong>复制并保存好</strong>（因为只会出现一次，刷新页面就再也看不见了）。</p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/token.PNG" alt="token"></p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/token-info.PNG" alt="token-info"></p><h2 id="安装及配置-TravisCI"><a href="#安装及配置-TravisCI" class="headerlink" title="安装及配置 TravisCI"></a>安装及配置 TravisCI</h2><p>在你的 GitHub 主页，点击上方菜单栏中的 <code>Marketplace</code>。</p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/travis01.png" alt="Travis-01"></p><p>在搜索框中，搜索 <code>travis</code></p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/travis02.PNG" alt="Travis-02"></p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/travis03.PNG" alt="Travis-03"></p><p>点选第一个 <code>Travis CI</code> ，并滑动到最后，选择 <code>Open Source</code>，再点击 <code>Install it for free</code>。</p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/travis04.PNG" alt="Travis-04"></p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/travis05.PNG" alt="Travis-05"></p><p>继续点 <code>绿色</code> 按钮。</p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/travis06.PNG" alt="Travis-06"></p><p><code>Install</code> !</p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/travis07.PNG" alt="Travis-07"></p><p>现在我们可以在 <code>Travis CI</code> 官网上，登录并设置它了。</p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/travis08.PNG" alt="Travis-08"></p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/travis09.PNG" alt="Travis-09"></p><p>点击你的博客仓库，新建一个环境变量。<strong>Name</strong> 为 <code>GH_TOKEN</code>，<strong>Value</strong> 为刚才你在 GitHub 生成的 Token。确保 <strong>DISPLAY VALUE IN BUILD LOG</strong> 保持 <strong>不被勾选</strong> 避免你的 Token 泄漏。点击 <strong>Add</strong> 保存</p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/travis10.PNG" alt="Travis-10"></p><p>在你的 Hexo 站点文件夹中新建一个 <code>.travis.yml</code> 文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">10</span> <span class="comment"># use nodejs v10 LTS</span></span><br><span class="line"><span class="attr">cache:</span> <span class="string">npm</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">source</span> <span class="comment"># build source branch only</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="comment"># generate static files</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">pages</span></span><br><span class="line">  <span class="attr">skip-cleanup:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github-token:</span> <span class="string">$GH_TOKEN</span></span><br><span class="line">  <span class="attr">keep-history:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">target_branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">source</span></span><br><span class="line">  <span class="attr">local-dir:</span> <span class="string">public</span></span><br></pre></td></tr></table></figure><p>最后，将改动提交，并推送到 GitHub 上:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit <span class="literal">-m</span> <span class="string">"你的提交信息"</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>你的工作至此完成，可以泡杯咖啡，等待 <code>Travis CI</code> 运行结果（在你的 GitHub 博客仓库主页可以查看，如下图。如果是绿色的 ✅，那么成功；❎ 则代表失败）。</p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/build-status.PNG" alt="build-status"></p><h1 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h1><p>接下来你就可以自由的写博客啦。这里为你总结一些常用命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建博文</span></span><br><span class="line">hexo new &lt;标题名&gt;</span><br><span class="line"><span class="comment"># 本地预览</span></span><br><span class="line">hexo clean; hexo g; hexo s</span><br><span class="line"><span class="comment"># Git 推送</span></span><br><span class="line">git add .</span><br><span class="line">git commit <span class="literal">-m</span> <span class="string">"你的提交信息"</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo 官方文档</a></p>]]></content>
    
    <summary type="html">
    
      手把手教你从零开始搭建一个个人博客
    
    </summary>
    
    
      <category term="指南" scheme="https://cosmosning.github.io/categories/%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="前端" scheme="https://cosmosning.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Hexo" scheme="https://cosmosning.github.io/tags/Hexo/"/>
    
      <category term="GitHubPages" scheme="https://cosmosning.github.io/tags/GitHubPages/"/>
    
      <category term="TravisCI" scheme="https://cosmosning.github.io/tags/TravisCI/"/>
    
  </entry>
  
  <entry>
    <title>译文-程序员是如何排版简历的</title>
    <link href="https://cosmosning.github.io/2020/03/02/yi-wen-cheng-xu-yuan-shi-ru-he-pai-ban-jian-li-de/"/>
    <id>https://cosmosning.github.io/2020/03/02/yi-wen-cheng-xu-yuan-shi-ru-he-pai-ban-jian-li-de/</id>
    
    
    <author>
    <name>CosmosNing</name>
    <uri>https://cosmosning.github.io/about</uri>
    </author>
    
    
    <published>2020-03-02T09:30:09.000Z</published>
    <updated>2020-06-30T14:56:45.068Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>（译者按）又是一年招聘季，找工作的第一步便是要制作自己的简历。一份排版精美、可读性高的简历十分重要。那么，该如何高效的排版自己的简历？读者可以尝试一下本文示例的 CSS Grid 布局。</p><p>原标题：New Year, New Job? Let’s Make a Grid-Powered Resume!</p><p>作者：Ali Churcher</p><p>原文链接：<a href="https://css-tricks.com/new-year-new-job-lets-make-a-grid-powered-resume/" target="_blank" rel="noopener">https://css-tricks.com/new-year-new-job-lets-make-a-grid-powered-resume/</a></p></blockquote><h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><p>许多受欢迎的简历都利用网格形状组织自己的简历的不同部分，以充分利用有限的页面空间。下面，请与我一起，使用 CSS 中的网格（Grid），创建一个无论是在打印情况下、还是在不同屏幕尺寸下浏览都看上去很棒的布局吧！这样，我们可以在线和离线使用简历，还可能在新的一年中派上用场！</p><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/resume_preview.png" alt="简历效果预览"></p><p>首先，我们创建一个简历的容器和简历子部分。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"resume"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"photo"</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"about"</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"work"</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"community"</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"skills"</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要开始使用 CSS 中的网格，我们向 <code>resume</code> 样式类中添加 <code>display: grid</code> 。然后，我们得规定，容器内的元素如何在网格中放置。在这个示例中，我们将容器划分为 4 行 2 列。</p><p>与此同时，我们使用 CSS 网格中规定网格大小的单位 <code>fr</code> 来明确各个网格的比例大小关系。我们将每行等分（也就是每一行的大小都是 <code>1fr</code>），并设置第一列是第二列的两倍 （ <code>2fr</code> ）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.resume</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">2</span>fr <span class="number">1</span>fr;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/resume-01-1.jpg" alt="简历容器布局示意图"></p><p>接下来，我们将使用 <code>grid-template-areas</code> 属性来描述元素在网格中摆放的位置。首先，我们需要为每一个简历子部分的 <code>grid-area</code> 指定一个名字。你可以使用任何名字，但是在这里，我们采用与简历子部分相同的名字：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.name</span>&#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.photo</span>&#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: photo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>现在，我们到了最有趣的部分。在样式类 <code>resume</code> 中的 <code>grid-template-areas</code> 属性中按你的需求放置上述定义好的 <code>grid-area</code> 的名字。例如，我们在 <code>grid-template-areas</code> 的左上角添加了 <code>name</code> ，这意味着我们将我们的名字放在了简历的左上角。我们的 <code>work</code> 部分有很多内容，因此我们将其添加了两次，使得它能够占据两个网格单元。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.resume</span>&#123;</span><br><span class="line">    <span class="attribute">grid-template-areas</span>:</span><br><span class="line">        <span class="string">"name photo"</span></span><br><span class="line">        <span class="string">"work about"</span></span><br><span class="line">        <span class="string">"work education"</span></span><br><span class="line">        <span class="string">"community skills"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是我们目前完成的成果：</p><iframe name="cp_embed_1" src="https://codepen.io/alichur/embed/xxbKdKZ?height=367&amp;theme-id=1&amp;default-tab=result&amp;user=alichur&amp;slug-hash=xxbKdKZ&amp;pen-title=grid%20resume%20%20lines&amp;name=cp_embed_1" scrolling="no" frameborder="0" height="367" allowtransparency="true" allowfullscreen="true" allowpaymentrequest="true" title="grid resume  lines" class="cp_embed_iframe " style="width: 100%; overflow: hidden; display: block;" id="cp_embed_xxbKdKZ"></iframe><h1 id="调整布局"><a href="#调整布局" class="headerlink" title="调整布局"></a>调整布局</h1><p>属性<code>grid-template-areas</code> 使你能够轻松改变你的布局。比如，如果你认为，和教育（<code>education</code>）相比，雇主对你的技能（<code>skills</code>）更感兴趣，你仅仅只需要在 <code>grid-template-areas</code> 中调换它们的位置即可（也就意味着，它们在显示时，也会调换位置），而不需要做其他任何改动。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.resume</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">"name photo"</span></span><br><span class="line">    <span class="string">"work about"</span></span><br><span class="line">    <span class="string">"work skills"</span></span><br><span class="line">    <span class="string">"community education"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/resume-02.jpg" alt="调整布局示例"></p><iframe name="cp_embed_2" src="https://codepen.io/alichur/embed/bGNGGNP?height=367&amp;theme-id=1&amp;default-tab=result&amp;user=alichur&amp;slug-hash=bGNGGNP&amp;pen-title=grid%20resume%20%20swapping%20sections&amp;name=cp_embed_2" scrolling="no" frameborder="0" height="367" allowtransparency="true" allowfullscreen="true" allowpaymentrequest="true" title="grid resume  swapping sections" class="cp_embed_iframe " style="width: 100%; overflow: hidden; display: block;" id="cp_embed_bGNGGNP"></iframe>只需很小的 CSS 代码改动，我们就可以获得较窄一列靠左的简历布局。那就是网格布局的优势之一，即我们可以通过重新排列已经命名的 `grid-area` 来移动子块，而保证其他源代码保持其原有位置。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.resume</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">"photo education"</span></span><br><span class="line">    <span class="string">"name work"</span></span><br><span class="line">    <span class="string">"about work"</span></span><br><span class="line">    <span class="string">"skills community"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/resume-03-1.jpg" alt="窄列靠左示例"></p><iframe name="cp_embed_3" src="https://codepen.io/alichur/embed/XWJrRjb?height=367&amp;theme-id=default&amp;default-tab=result&amp;user=alichur&amp;slug-hash=XWJrRjb&amp;pen-title=grid%20resume%20%20left%20design&amp;name=cp_embed_3" scrolling="no" frameborder="0" height="367" allowtransparency="true" allowfullscreen="true" allowpaymentrequest="true" title="grid resume  left design" class="cp_embed_iframe " style="width: 100%; overflow: hidden; display: block;" id="cp_embed_XWJrRjb"></iframe><h1 id="划分更多列"><a href="#划分更多列" class="headerlink" title="划分更多列"></a>划分更多列</h1><p>也许你想在简历中添加个人参考。我们可以向网格模板中增添第三列，并把它放在最底部一行。要注意的是，我们也需要等比例的改变列的大小，然后更新模板区域。这样会使得某些元素占据了两列，但是这保持整体布局的正确。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.resume</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">"name name photo"</span></span><br><span class="line">    <span class="string">"work work about"</span></span><br><span class="line">    <span class="string">"work work education"</span></span><br><span class="line">    <span class="string">"community references skills"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/CosmosNing/MyPicGo/raw/master/images/2020/04/resume-04-1.jpg" alt="划分列示例"></p><iframe name="cp_embed_4" src="https://codepen.io/alichur/embed/gObYWvd?height=367&amp;theme-id=default&amp;default-tab=result&amp;user=alichur&amp;slug-hash=gObYWvd&amp;pen-title=grid%20resume%20%20split%20columns&amp;name=cp_embed_4" scrolling="no" frameborder="0" height="367" allowtransparency="true" allowfullscreen="true" allowpaymentrequest="true" title="grid resume  split columns" class="cp_embed_iframe " style="width: 100%; overflow: hidden; display: block;" id="cp_embed_gObYWvd"></iframe><h1 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h1><p>对于小屏幕，比如移动设备，我们可以在单列展示简历。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.resume</span>&#123;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr;</span><br><span class="line">    <span class="attribute">grid-template-areas</span>:</span><br><span class="line">      <span class="string">"photo"</span></span><br><span class="line">      <span class="string">"name"</span></span><br><span class="line">      <span class="string">"about"</span></span><br><span class="line">      <span class="string">"work"</span></span><br><span class="line">      <span class="string">"education"</span></span><br><span class="line">      <span class="string">"skills"</span></span><br><span class="line">      <span class="string">"community"</span></span><br><span class="line">      <span class="string">"references"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们可以采用媒介查询（media query），当遇到更宽的屏幕时，改变布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">1200px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.resume</span> &#123;</span><br><span class="line">    <span class="attribute">grid-template-areas</span>:</span><br><span class="line">      <span class="string">"name photo"</span></span><br><span class="line">      <span class="string">"work about"</span></span><br><span class="line">      <span class="string">"work education"</span></span><br><span class="line">      <span class="string">"community skills"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于屏幕尺寸的响应，可以增加更多的临界点。例如，在平板电脑等中型屏幕上，我们可能希望所有内容都放在一个栏中，但“个人”和“图像”部分需要并排放置在顶部。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">900px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.resume</span> &#123;</span><br><span class="line">      <span class="attribute">grid-template-columns</span>: <span class="number">2</span>fr <span class="number">1</span>fr;</span><br><span class="line">      <span class="attribute">grid-template-areas</span>:</span><br><span class="line">        <span class="string">"name photo"</span></span><br><span class="line">        <span class="string">"about about"</span></span><br><span class="line">        <span class="string">"work work"</span></span><br><span class="line">        <span class="string">"education education"</span></span><br><span class="line">        <span class="string">"skills skills"</span></span><br><span class="line">        <span class="string">"community community"</span></span><br><span class="line">        <span class="string">"references references"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="做好单页打印的准备"><a href="#做好单页打印的准备" class="headerlink" title="做好单页打印的准备"></a>做好单页打印的准备</h1><p>如果你需要在一张纸上精美的打印你的简历，则需要牢记一些注意事项。最困难的挑战通常是缩减字数，以满足一页纸的要求。</p><p>避免减小字体大小以挤压更多信息，因为它可能变得难以阅读。一个处理技巧便是在你制作简历时，为简历增加一个暂时的大小限制。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.resume</span> &#123;</span><br><span class="line">  <span class="attribute">width </span>: <span class="number">210mm</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">297mm</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过设置 A4 纸张大小的边界，我们可以清晰的看到内容尺寸是否太小，亦或者是内容超出边界（这意味着它会被打印到第二页）。</p><p>你可以告诉 CSS 在打印时将一些不必要的东西隐藏，比如浏览器会插入的像时间和页数等信息。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@page</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0cm</span>;</span><br><span class="line">  <span class="attribute">size</span>: A4 portrait;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的一件事是，不同的浏览器可能会使用大小略有不同的不同字体来呈现简历。 如果你想要非常精确的打印简历，另一种选择是将其另存为PDF，并在你的站点上提供下载链接。</p><h1 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h1><p>CSS Grid 在现代浏览器中具有良好的支持。</p><p>Internet Explorer（IE）支持使用前缀的 CSS Grid 规范的较旧版本。 例如，<code>grid-template-columns</code> 被编写为 <code>-ms-grid-columns</code> 。 通过 Autoprefixer 运行代码可以帮助添加这些前缀，但是由于在旧规范中某些属性的行为有所不同，而导致某些属性不存在，因此将需要进行手动更改和全面测试。 丹尼尔·托农（Daniel Tonon）的<a href="https://css-tricks.com/css-grid-in-ie-css-grid-and-the-new-autoprefixer/" target="_blank" rel="noopener">文章</a>值得一看，其中介绍了如何配置 Autoprefixer 以使事情尽可能正常地工作。</p><p>自动前缀的另一种方法是<a href="https://www.smashingmagazine.com/2017/11/css-grid-supporting-browsers-without-grid/" target="_blank" rel="noopener">提供回退</a>，例如通过使用 float 布局。 无法识别 CSS 网格属性的浏览器将使用此显示。 不管你是否需要支持IE，回退都是明智的，因为它确保了不支持 CSS Grid 的浏览器仍然正确显示你的内容。</p>]]></content>
    
    <summary type="html">
    
      用 Word 排版很难受？试试程序员的方式！
    
    </summary>
    
    
      <category term="前端" scheme="https://cosmosning.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="简历" scheme="https://cosmosning.github.io/tags/%E7%AE%80%E5%8E%86/"/>
    
      <category term="CSS" scheme="https://cosmosning.github.io/tags/CSS/"/>
    
      <category term="排版" scheme="https://cosmosning.github.io/tags/%E6%8E%92%E7%89%88/"/>
    
      <category term="Grid" scheme="https://cosmosning.github.io/tags/Grid/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-66-plus-one</title>
    <link href="https://cosmosning.github.io/2020/02/17/leetcode-66-plus-one/"/>
    <id>https://cosmosning.github.io/2020/02/17/leetcode-66-plus-one/</id>
    
    
    <author>
    <name>CosmosNing</name>
    <uri>https://cosmosning.github.io/about</uri>
    </author>
    
    
    <published>2020-02-17T10:42:55.000Z</published>
    <updated>2020-06-30T14:56:45.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="刷题标记"><a href="#刷题标记" class="headerlink" title="刷题标记"></a>刷题标记</h1><ul><li><input checked="" disabled="" type="checkbox"> 第一遍</li><li><input disabled="" type="checkbox"> 第二遍</li><li><input disabled="" type="checkbox"> 第三遍</li><li><input disabled="" type="checkbox"> 第四遍</li><li><input disabled="" type="checkbox"> 第五遍</li></ul><h1 id="求解过程"><a href="#求解过程" class="headerlink" title="求解过程"></a>求解过程</h1><blockquote><p>给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。</p><p>最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。</p><p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p><p>示例 1:</p><p>输入: [1,2,3]<br>输出: [1,2,4]<br>解释: 输入数组表示数字 123。<br>示例 2:</p><p>输入: [4,3,2,1]<br>输出: [4,3,2,2]<br>解释: 输入数组表示数字 4321。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/plus-one" target="_blank" rel="noopener">https://leetcode-cn.com/problems/plus-one</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>编写 <code>public int[] plusOne(int[] digits)</code> 函数</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题的思路可以简单描述为，模拟竖式加法运算。</p><h2 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] plusOne(<span class="keyword">int</span>[] digits) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 思路：模拟竖式计算</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 末位加一</span></span><br><span class="line">    digits[digits.length - <span class="number">1</span>] = digits[digits.length - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理进位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = digits.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (digits[i] &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            digits[i] = digits[i] % <span class="number">10</span>;</span><br><span class="line">            digits[i - <span class="number">1</span>] = digits[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理原有位数不够</span></span><br><span class="line">    <span class="keyword">if</span> (digits[<span class="number">0</span>] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[digits.length + <span class="number">1</span>];</span><br><span class="line">        result[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        result[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; digits.length; i++) &#123;</span><br><span class="line">            result[i+<span class="number">1</span>] = digits[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度</strong>为 $O(n)$</li><li><strong>空间复杂度</strong><ul><li>最好 $O(1)$ </li><li>最坏 $O(n)$ （最高位进位情况）</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      本篇文章带来有关 &quot;LeetCode-66-plus-one&quot; 我的求解过程
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://cosmosning.github.io/categories/LeetCode/"/>
    
    
      <category term="数组" scheme="https://cosmosning.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-1-two-sum</title>
    <link href="https://cosmosning.github.io/2020/02/17/leetcode-1-two-sum/"/>
    <id>https://cosmosning.github.io/2020/02/17/leetcode-1-two-sum/</id>
    
    
    <author>
    <name>CosmosNing</name>
    <uri>https://cosmosning.github.io/about</uri>
    </author>
    
    
    <published>2020-02-17T08:24:28.000Z</published>
    <updated>2020-06-30T14:56:45.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="刷题标记"><a href="#刷题标记" class="headerlink" title="刷题标记"></a>刷题标记</h1><ul><li><input checked="" disabled="" type="checkbox"> 第一遍</li><li><input disabled="" type="checkbox"> 第二遍</li><li><input disabled="" type="checkbox"> 第三遍</li><li><input disabled="" type="checkbox"> 第四遍</li><li><input disabled="" type="checkbox"> 第五遍</li></ul><h1 id="求解过程"><a href="#求解过程" class="headerlink" title="求解过程"></a>求解过程</h1><blockquote><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><p>示例:</p><p>给定 nums = [2, 7, 11, 15], target = 9</p><p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>编写 <code>public int[] twoSum(int[] nums, int target)</code> 函数</p></blockquote><h2 id="思路：暴力法"><a href="#思路：暴力法" class="headerlink" title="思路：暴力法"></a>思路：暴力法</h2><p>很容易想到一种暴力解法，即，</p><ul><li>枚举每一种可能，按条件返回结果</li></ul><h2 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴力解法：枚举每一种可能</span></span><br><span class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] + nums[j] == target)&#123;</span><br><span class="line">                result[<span class="number">0</span>] = i;</span><br><span class="line">                result[<span class="number">1</span>] = j;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度</strong>为 $O(n^2)$</li><li><strong>空间复杂度</strong>为 $O(1)$ </li></ul><h1 id="高手方案"><a href="#高手方案" class="headerlink" title="高手方案"></a>高手方案</h1><p>上述暴力法的时间效率实在是不堪入目。一种比较常规的优化思路便是<strong>空间换时间</strong>，来看一看<a href="https://leetcode-cn.com/problems/two-sum/solution/liang-shu-zhi-he-by-leetcode-2/" target="_blank" rel="noopener">高手的解法</a>。</p><h2 id="思路：一遍哈希表"><a href="#思路：一遍哈希表" class="headerlink" title="思路：一遍哈希表"></a>思路：一遍哈希表</h2><p>上述暴力法时间的低效主要是由于，程序只记住了两个待检验的数组下标，而重复遍历了数组很多次。其实，没必要重复遍历：<strong>遍历的时候，存储起来</strong>，就会使得时间效率提高。</p><p>对于本题，可以用<strong>哈希表</strong>，存储<strong>数</strong>和<strong>下标</strong>之间的关系。这样在通常情况下，只需 $O(1)$ 的时间，便可访问到哈希表中已存在的元素。从而使得整个程序的时间复杂度降到 $O(n)$ 。</p><h2 id="Java-实现-1"><a href="#Java-实现-1" class="headerlink" title="Java 实现"></a>Java 实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> complement = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(complement)) &#123;               <span class="comment">// 如果存在满足条件的数</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; map.get(complement), i &#125;; <span class="comment">// 直接返回结果</span></span><br><span class="line">        &#125;</span><br><span class="line">        map.put(nums[i], i);                             <span class="comment">// 否则，存储到哈希表中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度</strong>为 $O(n)$ </li><li><strong>空间复杂度</strong>为 $O(n)$ </li></ul><h1 id="类似题目：15-3sum"><a href="#类似题目：15-3sum" class="headerlink" title="类似题目：15.3sum"></a>类似题目：15.3sum</h1><blockquote><p>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p><p>示例：</p><p>给定数组 nums = [-1, 0, 1, 2, -1, -4]，</p><p>满足要求的三元组集合为：<br>[<br> [-1, 0, 1],<br> [-1, -1, 2]<br>]</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/3sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/3sum</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><h2 id="刷题标记-1"><a href="#刷题标记-1" class="headerlink" title="刷题标记"></a>刷题标记</h2><ul><li><input checked="" disabled="" type="checkbox"> 第一遍</li><li><input disabled="" type="checkbox"> 第二遍</li><li><input disabled="" type="checkbox"> 第三遍</li><li><input disabled="" type="checkbox"> 第四遍</li><li><input disabled="" type="checkbox"> 第五遍</li></ul><h2 id="高手方案-1"><a href="#高手方案-1" class="headerlink" title="高手方案"></a>高手方案</h2><p>这道题，我没什么思路，直接参考了<a href="https://leetcode-cn.com/problems/3sum/solution/hua-jie-suan-fa-15-san-shu-zhi-he-by-guanpengchn/" target="_blank" rel="noopener">高手题解</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">int</span> len = nums.length;</span><br><span class="line">    <span class="keyword">if</span>(nums == <span class="keyword">null</span> || len &lt; <span class="number">3</span>) <span class="keyword">return</span> ans;</span><br><span class="line">    Arrays.sort(nums); <span class="comment">// 排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len ; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">// 如果当前数字大于0，则三数之和一定大于0，所以结束循环</span></span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>; <span class="comment">// 去重</span></span><br><span class="line">        <span class="keyword">int</span> L = i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> R = len-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(L &lt; R)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = nums[i] + nums[L] + nums[R];</span><br><span class="line">            <span class="keyword">if</span>(sum == <span class="number">0</span>)&#123;</span><br><span class="line">                ans.add(Arrays.asList(nums[i],nums[L],nums[R]));</span><br><span class="line">                <span class="keyword">while</span> (L&lt;R &amp;&amp; nums[L] == nums[L+<span class="number">1</span>]) L++; <span class="comment">// 去重</span></span><br><span class="line">                <span class="keyword">while</span> (L&lt;R &amp;&amp; nums[R] == nums[R-<span class="number">1</span>]) R--; <span class="comment">// 去重</span></span><br><span class="line">                L++;</span><br><span class="line">                R--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) L++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) R--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><strong>空间换时间</strong>是一种常见的优化思路</li><li>另外，根据题意，<strong>舍弃遍历过程中绝不可能的组合</strong>，也是一种优化手段</li><li>已经<strong>有序</strong>的元素有着非常良好的性质，可以<strong>先排序</strong>，<strong>再解题</strong>。</li></ul>]]></content>
    
    <summary type="html">
    
      本篇文章带来有关 &quot;LeetCode-1-two-sum&quot; 我的求解过程
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://cosmosning.github.io/categories/LeetCode/"/>
    
    
      <category term="数组" scheme="https://cosmosning.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="哈希表" scheme="https://cosmosning.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
      <category term="排序" scheme="https://cosmosning.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>合并有序线性表</title>
    <link href="https://cosmosning.github.io/2020/02/17/he-bing-you-xu-xian-xing-biao/"/>
    <id>https://cosmosning.github.io/2020/02/17/he-bing-you-xu-xian-xing-biao/</id>
    
    
    <author>
    <name>CosmosNing</name>
    <uri>https://cosmosning.github.io/about</uri>
    </author>
    
    
    <published>2020-02-17T07:06:02.000Z</published>
    <updated>2020-06-30T14:56:45.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="刷题标记"><a href="#刷题标记" class="headerlink" title="刷题标记"></a>刷题标记</h1><ul><li><input checked="" disabled="" type="checkbox"> 第一遍</li><li><input disabled="" type="checkbox"> 第二遍</li><li><input disabled="" type="checkbox"> 第三遍</li><li><input disabled="" type="checkbox"> 第四遍</li><li><input disabled="" type="checkbox"> 第五遍</li></ul><h1 id="求解过程"><a href="#求解过程" class="headerlink" title="求解过程"></a>求解过程</h1><blockquote><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p>示例：</p><p>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/merge-two-sorted-lists" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-two-sorted-lists</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>编写 <code>public ListNode mergeTwoLists(ListNode l1, ListNode l2)</code> 函数</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>合并有序线性表 L1、L2，有一个通用的思路，如下</p><ol><li>初始化每个表的遍历指针 Lp1，Lp2；并且新建一个线性表 L3，存储结果。</li><li>循环比较，将较小元素放入 L3</li><li>如果 L1 还有元素未遍历，处理 L1 剩余元素</li><li>处理 L2 剩余元素未遍历，处理 L2 剩余元素</li></ol><h2 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> * int val;</span></span><br><span class="line"><span class="comment"> * ListNode next;</span></span><br><span class="line"><span class="comment"> * ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建带有头指针的链表，方便操作</span></span><br><span class="line">    ListNode l3 = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 新建一个 p 指针用于遍历</span></span><br><span class="line">    ListNode p = l3;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环比较，并把较小的结点加入链表 l3</span></span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l1.val &lt; l2.val)&#123;</span><br><span class="line">            p.next = l1;</span><br><span class="line">            p = p.next;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p.next = l2;</span><br><span class="line">            p = p.next;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 l1 剩余元素加入 l3</span></span><br><span class="line">    <span class="keyword">if</span>(l1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">        p.next = l1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 l2 剩余元素加入 l3</span></span><br><span class="line">    <span class="keyword">if</span>(l2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">        p.next = l2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除 l3 的头指针</span></span><br><span class="line">    <span class="keyword">return</span> l3.next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度</strong>为 $O(n+m)$</li><li><strong>空间复杂度</strong>为 $O(1)$</li></ul><h1 id="高手方案"><a href="#高手方案" class="headerlink" title="高手方案"></a>高手方案</h1><h2 id="思路：递归"><a href="#思路：递归" class="headerlink" title="思路：递归"></a>思路：递归</h2><p>高手还另外提供了一种<a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/solution/he-bing-liang-ge-you-xu-lian-biao-by-leetcode/" target="_blank" rel="noopener">递归思路</a>：</p><ul><li>两个链表头部较小的一个与剩下元素的 <code>merge</code> 操作结果合并</li></ul><h2 id="Java-实现-1"><a href="#Java-实现-1" class="headerlink" title="Java 实现"></a>Java 实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class="line">        l1.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        l2.next = mergeTwoLists(l1, l2.next);</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度</strong>为 $O(n+m)$</li><li><strong>空间复杂度</strong>为 $O(n+m)$ ：最多消耗 n+m 层栈空间</li></ul><h1 id="类似题：88-merge-sorted-array"><a href="#类似题：88-merge-sorted-array" class="headerlink" title="类似题：88.merge-sorted-array"></a>类似题：88.merge-sorted-array</h1><blockquote><p>给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。</p><p>说明:</p><p>初始化 nums1 和 nums2 的元素数量分别为 m 和 n。<br>你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。<br>示例:</p><p>输入:<br>nums1 = [1,2,3,0,0,0], m = 3<br>nums2 = [2,5,6],       n = 3</p><p>输出: [1,2,2,3,5,6]</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/merge-sorted-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-sorted-array</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><h2 id="刷题标记-1"><a href="#刷题标记-1" class="headerlink" title="刷题标记"></a>刷题标记</h2><ul><li><input checked="" disabled="" type="checkbox"> 第一遍</li><li><input disabled="" type="checkbox"> 第二遍</li><li><input disabled="" type="checkbox"> 第三遍</li><li><input disabled="" type="checkbox"> 第四遍</li><li><input disabled="" type="checkbox"> 第五遍</li></ul><h2 id="Java-实现-2"><a href="#Java-实现-2" class="headerlink" title="Java 实现"></a>Java 实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先把 nums 所有元素移到最后，记录开始位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        nums1[i + n] = nums1[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再遍历比较，写入到 nums1 前半部分</span></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = n;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n &amp;&amp; j &lt; n + m) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1[j] &lt; nums2[i]) &#123;</span><br><span class="line">            nums1[k++] = nums1[j++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nums1[k++] = nums2[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 nums1 剩余元素</span></span><br><span class="line">    <span class="keyword">while</span> (j &lt; n + m)&#123;</span><br><span class="line">        nums1[k++] = nums1[j++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 nums2 剩余元素</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; n)&#123;</span><br><span class="line">        nums1[k++] = nums2[i++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度</strong>为 $O(n+m)$</li><li><strong>空间复杂度</strong>为 $O(1)$</li></ul><h2 id="高手方案-1"><a href="#高手方案-1" class="headerlink" title="高手方案"></a>高手方案</h2><ul><li>思路<ul><li>从后往前遍历，将大的放到 nums1 的指定位置</li></ul></li><li>Java 实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作者：LeetCode</span></span><br><span class="line"><span class="comment">// 链接：https://leetcode-cn.com/problems/merge-sorted-array/solution/he-bing-liang-ge-you-xu-shu-zu-by-leetcode/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// two get pointers for nums1 and nums2</span></span><br><span class="line">    <span class="keyword">int</span> p1 = m - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> p2 = n - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// set pointer for nums1</span></span><br><span class="line">    <span class="keyword">int</span> p = m + n - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// while there are still elements to compare</span></span><br><span class="line">    <span class="keyword">while</span> ((p1 &gt;= <span class="number">0</span>) &amp;&amp; (p2 &gt;= <span class="number">0</span>))</span><br><span class="line">        <span class="comment">// compare two elements from nums1 and nums2 </span></span><br><span class="line">        <span class="comment">// and add the largest one in nums1 </span></span><br><span class="line">        nums1[p--] = (nums1[p1] &lt; nums2[p2]) ? nums2[p2--] : nums1[p1--];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add missing elements from nums2</span></span><br><span class="line">    System.arraycopy(nums2, <span class="number">0</span>, nums1, <span class="number">0</span>, p2 + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度</strong>为 $O(n+m)$</li><li><strong>空间复杂度</strong>为 $O(1)$</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>合并有序线性表</strong> L1、L2，有一个<strong>通用的思路</strong>，如下</p><ol><li>初始化每个表的遍历指针 Lp1，Lp2；并且新建一个线性表 L3，存储结果。</li><li>循环比较，将较小元素放入 L3</li><li>如果 L1 还有元素未遍历，处理 L1 剩余元素</li><li>处理 L2 剩余元素未遍历，处理 L2 剩余元素</li></ol>]]></content>
    
    <summary type="html">
    
      本篇文章带来有关两道有关 &quot;合并有序线性表&quot; 的求解过程
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://cosmosning.github.io/categories/LeetCode/"/>
    
    
      <category term="合并" scheme="https://cosmosning.github.io/tags/%E5%90%88%E5%B9%B6/"/>
    
      <category term="有序表" scheme="https://cosmosning.github.io/tags/%E6%9C%89%E5%BA%8F%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-189-rotate-array</title>
    <link href="https://cosmosning.github.io/2020/02/17/leetcode-189-rotate-array/"/>
    <id>https://cosmosning.github.io/2020/02/17/leetcode-189-rotate-array/</id>
    
    
    <author>
    <name>CosmosNing</name>
    <uri>https://cosmosning.github.io/about</uri>
    </author>
    
    
    <published>2020-02-17T06:01:58.000Z</published>
    <updated>2020-06-30T14:56:45.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="刷题标记"><a href="#刷题标记" class="headerlink" title="刷题标记"></a>刷题标记</h1><ul><li><input checked="" disabled="" type="checkbox"> 第一遍</li><li><input disabled="" type="checkbox"> 第二遍</li><li><input disabled="" type="checkbox"> 第三遍</li><li><input disabled="" type="checkbox"> 第四遍</li><li><input disabled="" type="checkbox"> 第五遍</li></ul><h1 id="求解过程"><a href="#求解过程" class="headerlink" title="求解过程"></a>求解过程</h1><blockquote><p>给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。</p><p>示例 1:</p><p>输入: [1,2,3,4,5,6,7] 和 k = 3<br>输出: [5,6,7,1,2,3,4]<br>解释:<br>向右旋转 1 步: [7,1,2,3,4,5,6]<br>向右旋转 2 步: [6,7,1,2,3,4,5]<br>向右旋转 3 步: [5,6,7,1,2,3,4]<br>示例 2:</p><p>输入: [-1,-100,3,99] 和 k = 2<br>输出: [3,99,-1,-100]<br>解释:<br>向右旋转 1 步: [99,-1,-100,3]<br>向右旋转 2 步: [3,99,-1,-100]<br>说明:</p><p>尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。<br>要求使用空间复杂度为 O(1) 的 原地 算法。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/rotate-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/rotate-array</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>编写 <code>public void rotate(int[] nums, int k)</code> </p></blockquote><h2 id="思路：暴力法"><a href="#思路：暴力法" class="headerlink" title="思路：暴力法"></a>思路：暴力法</h2><ul><li>两个循环<ul><li>内部循环只向右移动一格，用一个变量暂存溢出元素</li><li>外部循环 <strong>k</strong> 次，相当于向右移动 k 个位置</li></ul></li></ul><h2 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 暴力法</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;          <span class="comment">//多次移动</span></span><br><span class="line">        <span class="keyword">int</span> tail = nums[nums.length - <span class="number">1</span>];  <span class="comment">// 用一个变量暂存移位溢出的数字</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = nums.length - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">            nums[j] = nums[j - <span class="number">1</span>];         <span class="comment">// 内部循环只移动一格</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        nums[<span class="number">0</span>] = tail;                    <span class="comment">// 将溢出的数组，放到数组首位</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度</strong>为 $O(n*k)$</li><li><strong>空间复杂度</strong>为 $O(1)$</li></ul><h1 id="高手方案"><a href="#高手方案" class="headerlink" title="高手方案"></a>高手方案</h1><h2 id="思路：使用反转"><a href="#思路：使用反转" class="headerlink" title="思路：使用反转"></a>思路：使用反转</h2><p>这里记录一下 <strong>使用反转</strong> 这个思路</p><blockquote><p>这个方法基于这个事实：当我们旋转数组 k 次，$k%n$ 个尾部元素会被移动到头部，剩下的元素会被向后移动。</p><p>在这个方法中，我们首先将所有元素反转。然后反转前 k 个元素，再反转后面 $n−k$ 个元素，就能得到想要的结果。</p></blockquote><h2 id="Java-实现-1"><a href="#Java-实现-1" class="headerlink" title="Java 实现"></a>Java 实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        k %= nums.length;</span><br><span class="line">        reverse(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">        reverse(nums, <span class="number">0</span>, k - <span class="number">1</span>);</span><br><span class="line">        reverse(nums, k, nums.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = nums[start];</span><br><span class="line">            nums[start] = nums[end];</span><br><span class="line">            nums[end] = temp;</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度</strong>为 $O(n)$</li><li><strong>空间复杂度</strong>为 $O(1)$</li></ul><p>更多参见<a href="https://leetcode-cn.com/problems/rotate-array/solution/xuan-zhuan-shu-zu-by-leetcode/" target="_blank" rel="noopener">官方题解</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>循环移动数组元素可以利用<strong>反转</strong>高效解决，即<ul><li>反转数组所有元素</li><li>反转前 k 个 元素</li><li>反转后 n - k 个元素</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      本篇文章带来有关 &quot;LeetCode-189-rotate-array&quot; 我的求解过程
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://cosmosning.github.io/categories/LeetCode/"/>
    
    
      <category term="数组" scheme="https://cosmosning.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
</feed>
